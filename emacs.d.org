# -*- eval: (my/org-config-mode) -*-

#+TITILE: Emacs configuration

* Early-init
:PROPERTIES:
:header-args: :tangle ./early-init.el
:END:

Emacs 27 introduces early-init.el, which is run before init.el, before package and UI initialization happens.

** Header

#+begin_src emacs-lisp
	
  ;; -*- lexical-binding: t -*-

#+end_src

** Early-init

#+begin_src emacs-lisp

  ;; Defer garbage collection further back in the startup process
  (setq gc-cons-threshold most-positive-fixnum)

  ;; Package initialize occurs automatically, before `user-init-file' is
  ;; loaded, but after `early-init-file'. We handle package
  ;; initialization, so we must prevent Emacs from doing it early!
  (setq package-enable-at-startup nil)

  ;; Faster to disable these here (before they've been initialized)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (when (featurep 'ns)
    (push '(ns-transparent-titlebar . t) default-frame-alist))

#+end_src

* Init
:PROPERTIES:
:header-args: :tangle ./init.el
:END:

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t no-byte-compile: t -*-

#+end_src

** Speed up startup

#+begin_src emacs-lisp

  (defvar centaur-gc-cons-threshold (if (display-graphic-p) 16000000 1600000)
    "The default value to use for `gc-cons-threshold'. If you experience freezing,
  decrease this. If you experience stuttering, increase this.")

  (defvar centaur-gc-cons-upper-limit (if (display-graphic-p) 400000000 100000000)
    "The temporary value for `gc-cons-threshold' to defer it.")

  (defvar centaur-gc-timer (run-with-idle-timer 10 t #'garbage-collect)
    "Run garbarge collection when idle 10s.")

  (defvar default-file-name-handler-alist file-name-handler-alist)

  (setq file-name-handler-alist nil)
  (setq gc-cons-threshold centaur-gc-cons-upper-limit
        gc-cons-percentage 0.5)
  (add-hook 'emacs-startup-hook
            (lambda ()
              "Restore defalut values after startup."
              (setq file-name-handler-alist default-file-name-handler-alist)
              (setq gc-cons-threshold centaur-gc-cons-threshold
                    gc-cons-percentage 0.1)

              ;; GC automatically while unfocusing the frame
              ;; `focus-out-hook' is obsolete since 27.1
              (if (boundp 'after-focus-change-function)
                  (add-function :after after-focus-change-function
                                (lambda ()
                                  (unless (frame-focus-state)
                                    (garbage-collect))))
                (add-hook 'focus-out-hook 'garbage-collect))

              ;; Avoid GCs while using `ivy'/`counsel'/`swiper' and `helm', etc.
              ;; @see http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/
              (defun my/minibuffer-setup-hook ()
                (setq gc-cons-threshold centaur-gc-cons-upper-limit))

              (defun my/minibuffer-exit-hook ()
                (setq gc-cons-threshold centaur-gc-cons-threshold))

              (add-hook 'minibuffer-setup-hook #'my/minibuffer-setup-hook)
              (add-hook 'minibuffer-exit-hook #'my/minibuffer-exit-hook)))

#+end_src

** Startup theme

#+begin_src emacs-lisp

  ;; Hide cursor and mode-line at startup
  (setq-default mode-line-format nil)
  (internal-show-cursor nil nil)

#+end_src

** Load path

#+begin_src emacs-lisp

  ;; Optimize: Force "lisp" at the head to reduce the startup time.
  (defun update-load-path (&rest _)
    "Update `load-path'."
    (dolist (dir '("lisp"))
      (push (expand-file-name dir user-emacs-directory) load-path)))

  (advice-add #'package-initialize :after #'update-load-path)

  (update-load-path)
	
#+end_src

** Packages

#+begin_src emacs-lisp

  ;; Without this comment Emacs25 adds (package-initialize) here
  (require 'init-package)

  ;; Preferences
  (require 'init-basic)
  ;; (require 'init-hydra)

  (require 'init-ui)
  (require 'init-evil)
  (require 'init-edit)
  (require 'init-ivy)
  (require 'init-completion)
  (require 'init-snippets)

  (require 'init-highlight)
  (require 'init-ibuffer)
  (require 'init-window)
  (require 'init-treemacs)

  ;; (require 'init-eshell)
  ;; (require 'init-shell)

  ;; (require 'init-markdown)
  (require 'init-org)

  (require 'init-utils)

  ;; Programming
  (require 'init-vcs)
  ;; (require 'init-flycheck)
  (require 'init-projectile)

  (require 'init-prog)
  (require 'init-elisp)
  (require 'init-tex)

#+end_src

* Basic
:PROPERTIES:
:header-args: :tangle ./lisp/init-basic.el
:END:

Better defaults configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

  (require 'init-custom)
  (require 'init-funcs)
	
#+end_src

** Personal information

#+begin_src emacs-lisp

  (setq user-full-name    "none"
        user-mail-address "none")
	
#+end_src

** Encoding

#+begin_src emacs-lisp

  ;; UTF-8 as the default coding system
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))

  ;; Explicitly set the prefered coding systems to avoid annoying prompt
  ;; from emacs (especially on Microsoft Windows)
  (prefer-coding-system          'utf-8)
  (setq locale-coding-system     'utf-8)

  (set-language-environment      'utf-8)
  (set-default-coding-systems    'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-clipboard-coding-system   'utf-8)
  (set-file-name-coding-system   'utf-8)
  (set-keyboard-coding-system    'utf-8)
  (set-terminal-coding-system    'utf-8)
  (set-selection-coding-system   'utf-8)
  (modify-coding-system-alist    'process "*" 'utf-8)

#+end_src

** Keep Folders Clean

#+begin_src emacs-lisp

  (shell-command "rm -f ~/.emacs.d/session.*")
  (shell-command "rm -f ~/.emacs.d/org-src-*.txt")

#+end_src

** Fonts

#+begin_src emacs-lisp

  (defun my/set-font-faces ()
    ;; Set the font face based on platform
    (set-face-attribute 'default nil :font "SauceCodePro Nerd Font" :weight 'regular :height 125)

    ;; Set the fixed pitch fac
    (set-face-attribute 'fixed-pitch nil :font "SauceCodePro Nerd Font" :weight 'regular :height 125)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "SauceCodePro Nerd Font" :height 125 :weight 'regular))

  (if (daemonp)
      (add-hook 'after-make-frame-functions (lambda (frame)
                                              (with-selected-frame frame
                                                (my/set-font-faces))))
    (my/set-font-faces))

#+end_src

** History
*** saveplace

#+begin_src emacs-lisp
	
  (use-package saveplace
    :ensure nil
    :hook (after-init . save-place-mode))

#+end_src

*** savehist

#+begin_src emacs-lisp

  (use-package savehist
    :ensure nil
    :hook (after-init . savehist-mode)
    :init (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
                history-length 1000
                savehist-additional-variables '(mark-ring
                                                global-mark-ring
                                                search-ring
                                                regexp-search-ring
                                                extended-command-history)
                savehist-autosave-interval 300))

#+end_src

*** simple

#+begin_src emacs-lisp

  (use-package simple
    :ensure nil
    :hook ((after-init            . size-indication-mode)
           ((prog-mode conf-mode) . enable-trailing-whitespace))
    :init
    (setq column-number-mode          t
          line-number-mode            t
          line-move-visual            nil
          track-eol                   t   ; Keep cursor at end of lines. Require line-move-visual is nil.
          set-mark-command-repeat-pop t)  ; Repeating C-SPC after popping mark pops it again

    ;; Visualize TAB, (HARD) SPACE, NEWLINE
    (setq-default show-trailing-whitespace nil) ; Don't show trailing whitespace by default
    (defun enable-trailing-whitespace ()
      "Show trailing spaces and delete on saving."
      (setq show-trailing-whitespace t)
      (add-hook 'before-save-hook #'delete-trailing-whitespace nil t)))

#+end_src

*** so-long

#+begin_src emacs-lisp

  (use-package so-long
    :ensure nil
    :hook (after-init . global-so-long-mode)
    :config (setq so-long-threshold 400))

#+end_src

** Mouse & Smooth Scroll

Scroll one line at a time (less "jumpy" than defaults)

#+begin_src emacs-lisp

  (when (display-graphic-p)
    (setq mouse-wheel-scroll-amount     '(1 ((shift) . 1))
          mouse-wheel-progressive-speed nil))

  (setq scroll-step           1
        scroll-margin         7
        scroll-conservatively 100000)

#+end_src

** Keybinding

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-S-n")    'make-frame-command)
  (global-set-key (kbd "M-k")      nil)

  (use-package general
    :config
    (general-create-definer leader-key-def
      :keymaps '(normal
                 insert
                 visual
                 emacs
                 magit-status-mode-map
                 magit-log-mode-map)
      :prefix "SPC"
      :global-prefix "C-SPC"))

  (leader-key-def
    "hk"  'helpful-key
    "hv"  'counsel-describe-variable
    "hf"  'counsel-describe-function
    "hF"  'counsel-describe-face
    "hs"  'counsel-describe-symbol
    "ch"  'counsel-command-history
    "SPC" (lambda ()
            (interactive)
            (let ((file-path (my/lf-select-file default-directory)))
              (unless (equal file-path "cancel")
                (find-file file-path))))
    "q"   (lambda ()
            (interactive)
            (cond ((bound-and-true-p previous-major-mode-is-org) (my/org-edit-src-exit))
                  ((bound-and-true-p with-editor-mode)           (with-editor-cancel t))
                  (t                                             (evil-quit))))
    "a"   'mark-whole-buffer
    "s"   'my/open-org-file
    "bb"  'counsel-switch-buffer
    "pl"  'counsel-package
    "pr"  'package-refresh-contents
    "wd"  'delete-other-windows)

#+end_src

** Indentation

#+begin_src emacs-lisp

  (setq-default tab-width 4)
  (setq indent-tabs-mode nil)

  (defun disable-tabs ()
    (setq indent-tabs-mode nil))

  (defun enable-tabs  ()
    (local-set-key (kbd "TAB") 'tab-to-tab-stop)
    (setq indent-tabs-mode t))

#+end_src

** Misc

#+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)
  (setq-default major-mode       'text-mode
                fill-column      100)

  (setq visible-bell                    t
        inhibit-compacting-font-caches  t    ; Don’t compact font caches during GC.
        delete-by-moving-to-trash       t    ; Deleting files go to OS's trash folder
        make-backup-files               nil  ; Forbide to make backup files
        auto-save-default               nil  ; Disable auto save
        confirm-kill-processes          nil  ; Disable confirm killing processes on exit
        enable-local-variables          :all ; Disable confirm to set local variables
        uniquify-buffer-name-style      'post-forward-angle-brackets ; Show path if names are same
        adaptive-fill-regexp            "[ t]+|[ t]*([0-9]+.|*+)[ t]*"
        adaptive-fill-first-line-regexp "^* *$"
        sentence-end                    "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*"
        sentence-end-double-space       nil)

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-basic)

#+end_src

* Completion
:PROPERTIES:
:header-args: :tangle ./lisp/init-completion.el
:END:

Auto-completion configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

  (require 'init-custom)
  (require 'init-funcs)
	
#+end_src

** company

#+begin_src emacs-lisp

  (use-package company
    :diminish
    :bind (:map company-active-map
                ("<tab>"     . company-complete-common-or-cycle)
                ("<backtab>" . company-select-previous))
    :hook ((after-init . global-company-mode))
    :init
    (setq company-tooltip-align-annotations t
          company-tooltip-limit             12
          company-idle-delay                0
          company-minimum-prefix-length     2
          company-box-scrollbar             nil
          company-require-match             nil
          company-dabbrev-ignore-case       nil
          company-dabbrev-downcase          nil))

#+end_src

** company-prescient

Better sorting and filtering

#+begin_src emacs-lisp

  (use-package company-prescient
    :after company
    :init
    (company-prescient-mode 1))

#+end_src

** company-box

#+begin_src emacs-lisp

  (use-package company-box
    :after company
    :diminish
    :defines company-box-icons-all-the-icons
    :hook (company-mode . company-box-mode)
    :init (setq company-box-enable-icon     t
                company-box-backends-colors nil
                company-box-doc-enable      nil)
    :config
    (when (display-graphic-p)
      (declare-function all-the-icons-faicon   'all-the-icons)
      (declare-function all-the-icons-material 'all-the-icons)
      (declare-function all-the-icons-octicon  'all-the-icons)
      (setq company-box-icons-all-the-icons
            `((Unknown       . ,(all-the-icons-material "find_in_page"             :height 0.8  :v-adjust -0.15                             ))
              (Text          . ,(all-the-icons-faicon   "text-width"               :height 0.8  :v-adjust -0.02                             ))
              (Method        . ,(all-the-icons-faicon   "cube"                     :height 0.8  :v-adjust -0.02 :face 'all-the-icons-purple ))
              (Function      . ,(all-the-icons-faicon   "cube"                     :height 0.8  :v-adjust -0.02 :face 'all-the-icons-purple ))
              (Constructor   . ,(all-the-icons-faicon   "cube"                     :height 0.8  :v-adjust -0.02 :face 'all-the-icons-purple ))
              (Field         . ,(all-the-icons-octicon  "tag"                      :height 0.85 :v-adjust 0     :face 'all-the-icons-lblue  ))
              (Variable      . ,(all-the-icons-octicon  "tag"                      :height 0.85 :v-adjust 0     :face 'all-the-icons-lblue  ))
              (Class         . ,(all-the-icons-material "settings_input_component" :height 0.8  :v-adjust -0.15 :face 'all-the-icons-orange ))
              (Interface     . ,(all-the-icons-material "share"                    :height 0.8  :v-adjust -0.15 :face 'all-the-icons-lblue  ))
              (Module        . ,(all-the-icons-material "view_module"              :height 0.8  :v-adjust -0.15 :face 'all-the-icons-lblue  ))
              (Property      . ,(all-the-icons-faicon   "wrench"                   :height 0.8  :v-adjust -0.02                             ))
              (Unit          . ,(all-the-icons-material "settings_system_daydream" :height 0.8  :v-adjust -0.15                             ))
              (Value         . ,(all-the-icons-material "format_align_right"       :height 0.8  :v-adjust -0.15 :face 'all-the-icons-lblue  ))
              (Enum          . ,(all-the-icons-material "storage"                  :height 0.8  :v-adjust -0.15 :face 'all-the-icons-orange ))
              (Keyword       . ,(all-the-icons-material "filter_center_focus"      :height 0.8  :v-adjust -0.15                             ))
              (Snippet       . ,(all-the-icons-material "format_align_center"      :height 0.8  :v-adjust -0.15                             ))
              (Color         . ,(all-the-icons-material "palette"                  :height 0.8  :v-adjust -0.15                             ))
              (File          . ,(all-the-icons-faicon   "file-o"                   :height 0.8  :v-adjust -0.02                             ))
              (Reference     . ,(all-the-icons-material "collections_bookmark"     :height 0.8  :v-adjust -0.15                             ))
              (Folder        . ,(all-the-icons-faicon   "folder-open"              :height 0.8  :v-adjust -0.02                             ))
              (EnumMember    . ,(all-the-icons-material "format_align_right"       :height 0.8  :v-adjust -0.15                             ))
              (Constant      . ,(all-the-icons-faicon   "square-o"                 :height 0.8  :v-adjust -0.1                              ))
              (Struct        . ,(all-the-icons-material "settings_input_component" :height 0.8  :v-adjust -0.15 :face 'all-the-icons-orange ))
              (Event         . ,(all-the-icons-octicon  "zap"                      :height 0.8  :v-adjust 0     :face 'all-the-icons-orange ))
              (Operator      . ,(all-the-icons-material "control_point"            :height 0.8  :v-adjust -0.15                             ))
              (TypeParameter . ,(all-the-icons-faicon   "arrows"                   :height 0.8  :v-adjust -0.02                             ))
              (Template      . ,(all-the-icons-material "format_align_left"        :height 0.8  :v-adjust -0.15                             )))
            company-box-icons-alist 'company-box-icons-all-the-icons)))

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-completion)

#+end_src

* Custom
:PROPERTIES:
:header-args: :tangle ./lisp/init-custom.el
:END:

Customization.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

#+end_src

** Custom definitions

#+begin_src emacs-lisp

  ;; Emacs Lisp Package Archive (ELPA)
  (defcustom centaur-package-archives-alist
    (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                        (not (gnutls-available-p))))
           (proto (if no-ssl "http" "https")))
      `(,(cons 'melpa
               `(,(cons "gnu"   (concat proto "://elpa.gnu.org/packages/"))
                 ,(cons "melpa" (concat proto "://melpa.org/packages/"))))
        ,(cons 'netease
               `(,(cons "gnu"   (concat proto "://mirrors.163.com/elpa/gnu/"))
                 ,(cons "melpa" (concat proto "://mirrors.163.com/elpa/melpa/"))))
        ,(cons 'ustc
               `(,(cons "gnu"   (concat proto "://mirrors.ustc.edu.cn/elpa/gnu/"))
                 ,(cons "melpa" (concat proto "://mirrors.ustc.edu.cn/elpa/melpa/"))))
        ,(cons 'tuna
               `(,(cons "gnu"   (concat proto "://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/"))
                 ,(cons "melpa" (concat proto "://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/"))))))
    "The package archives group list."
    :group 'centaur
    :type '(alist :key-type (symbol :tag "Archive group name")
                  :value-type (alist :key-type (string :tag "Archive name")
                                     :value-type (string :tag "URL or directory name"))))

  (defcustom centaur-package-archives 'melpa
    "Set package archives from which to fetch."
    :group 'centaur
    :set (lambda (symbol value)
           (set symbol value)
           (setq package-archives
                 (or (alist-get value centaur-package-archives-alist)
                     (error "Unknown package archives: `%s'" value))))
    :type `(choice ,@(mapcar
                      (lambda (item)
                        (let ((name (car item)))
                          (list 'const
                                :tag (capitalize (symbol-name name))
                                name)))
                      centaur-package-archives-alist)))

#+end_src

** End

#+begin_src emacs-lisp
	
  (provide 'init-custom)

#+end_src

* Edit
:PROPERTIES:
:header-args: :tangle ./lisp/init-edit.el
:END:

Editing configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-
	
  (require 'init-evil)
  (require 'init-basic)

#+end_src

** Russian keyboard

#+begin_src emacs-lisp

  (defun reverse-input-method (input-method)
    "Build the reverse mapping of single letters from INPUT-METHOD."
    (interactive
     (list (read-input-method-name "Use input method (default current): ")))
    (if (and input-method (symbolp input-method))
        (setq input-method (symbol-name input-method)))
    (let ((current current-input-method)
          (modifiers '(nil (control) (meta) (control meta))))
      (when input-method
        (activate-input-method input-method))
      (when (and current-input-method quail-keyboard-layout)
        (dolist (map (cdr (quail-map)))
          (let* ((to (car map))
                 (from (quail-get-translation
                        (cadr map) (char-to-string to) 1)))
            (when (and (characterp from) (characterp to))
              (dolist (mod modifiers)
                (define-key local-function-key-map
                  (vector (append mod (list from)))
                  (vector (append mod (list to)))))))))
      (when input-method
        (activate-input-method current))))

  (reverse-input-method 'russian-computer)

#+end_src

** delete-selection

Delete selection if you insert

#+begin_src emacs-lisp
	
  (use-package delsel
    :ensure nil
    :hook (after-init . delete-selection-mode))

#+end_src

** auto-revert

Automatically reload files was modified by external program

#+begin_src emacs-lisp
	
  (use-package autorevert
    :ensure nil
    :diminish
    :hook (after-init . global-auto-revert-mode))

#+end_src

** goto-addr

Click to browse URL or to send to e-mail address

#+begin_src emacs-lisp

  (use-package goto-addr
    :ensure nil
    :after evil
    :hook ((text-mode . goto-address-mode)
           (prog-mode . goto-address-prog-mode))
    :bind (:map evil-normal-state-map
                ("C-<return>" . goto-address-at-point)))

#+end_src

** avy

Jump to things in Emacs tree-style

#+begin_src emacs-lisp

  (use-package avy
    :after evil
    :bind (:map evil-normal-state-map
                ("/" . avy-goto-char-timer)
                :map evil-visual-state-map
                ("/" . avy-goto-char-timer)
                :map evil-motion-state-map
                ("/" . avy-goto-char-timer))
    :config
    (setq avy-all-windows     nil
          avy-timeout-seconds 0.4))

#+end_src

** aggressive-indent

Minor mode to aggressively keep your code always indented

#+begin_src emacs-lisp

  (use-package aggressive-indent
    :diminish
    :hook ((after-init . global-aggressive-indent-mode)
           ;; FIXME: Disable in big files due to the performance issues
           ;; https://github.com/Malabarba/aggressive-indent-mode/issues/73
           (find-file . (lambda ()
                          (if (> (buffer-size) (* 3000 80))
                              (aggressive-indent-mode -1)))))
    :config
    ;; Disable in some modes
    (dolist (mode '(asm-mode html-mode css-mode))
      (push mode aggressive-indent-excluded-modes))

    ;; Disable in some commands
    (add-to-list 'aggressive-indent-protected-commands #'delete-trailing-whitespace t)

    ;; Be slightly less aggressive in C/C++/Java/lua
    (add-to-list 'aggressive-indent-dont-indent-if
                 '(and (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                       (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                                           (thing-at-point 'line))))))

#+end_src

** comment-dwim-2

An all-in-one comment command to rule them all

#+begin_src emacs-lisp

  (use-package comment-dwim-2
    :init
    (leader-key-def
      "/" (lambda ()
            (interactive)
            (if (eq major-mode 'org-mode)
                (org-comment-dwim-2)
              (comment-dwim-2)))))

#+end_src

** electric-pair

Automatic parenthesis pairing

#+begin_src emacs-lisp

  (use-package electric-pair
    :ensure nil
    :hook (after-init . electric-pair-mode)
    :init
    (defvar my/exclude-electic-pair-modes '(latex-mode))

    (defun my/inhibit-electric-pair-mode (char)
      (member major-mode my/exclude-electic-pair-modes))

    (setq electric-pair-inhibit-predicate #'my/inhibit-electric-pair-mode))

#+end_src

** expand-region

Increase selected region by semantic units

#+begin_src emacs-lisp

  (use-package expand-region
    :after evil
    :bind (:map evil-visual-state-map
                ("<tab>"     . er/expand-region)
                ("<backtab>" . er/contract-region)))

#+end_src

** multiplite-regiton

#+begin_src emacs-lisp

  (use-package multiple-cursors
    :bind (("C-S-c C-S-c"   . mc/edit-lines)
           ("C->"           . mc/mark-next-like-this)
           ("C-<"           . mc/mark-previous-like-this)
           ("C-c C-<"       . mc/mark-all-like-this)
           ("C-M->"         . mc/skip-to-next-like-this)
           ("C-M-<"         . mc/skip-to-previous-like-this)
           ("s-<mouse-1>"   . mc/add-cursor-on-click)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click)
           :map mc/keymap
           ("C-|"           . mc/vertical-align-with-space)))

#+end_src

** Goto last change

#+begin_src emacs-lisp

  (use-package goto-chg
    :after evil
    :bind (:map evil-normal-state-map
                (";" . goto-last-change)
                ("," . goto-last-change-reverse)))

#+end_src

** subword

Handling capitalized subwords in a nomenclature

#+begin_src emacs-lisp

  (use-package subword
    :ensure nil
    :diminish
    :hook ((prog-mode        . subword-mode)
           (minibuffer-setup . subword-mode)))

#+end_src

** hideshow

Flexible text folding

#+begin_src emacs-lisp

  (use-package hideshow
    :after evil
    :ensure nil
    :hook (prog-mode . hs-minor-mode)
    :bind (:map evil-normal-state-map
                ("TAB" . hs-cycle))
    :config
    (defun hs-cycle (&optional level)
      (interactive "p")
      (let (message-log-max
            (inhibit-message t))
        (if (= level 1)
            (pcase last-command
              ('hs-cycle
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))
              ('hs-cycle-children
               (save-excursion (hs-show-block))
               (setq this-command 'hs-cycle-subtree))
              ('hs-cycle-subtree
               (hs-hide-block))
              (_
               (if (not (hs-already-hidden-p))
                   (hs-hide-block)
                 (hs-hide-level 1)
                 (setq this-command 'hs-cycle-children))))
          (hs-hide-level level)
          (setq this-command 'hs-hide-level))))

    ;; Display line counts
    (defun hs-display-code-line-counts (ov)
      "Display line counts when hiding codes."
      (when (eq 'code (overlay-get ov 'hs))
        (overlay-put ov 'display
                     (concat
                      " "
                      (propertize
                       (if (char-displayable-p ?⏷) "⏷" "...")
                       'face 'shadow)
                      (propertize
                       (format " (%d lines)"
                               (count-lines (overlay-start ov)
                                            (overlay-end ov)))
                       'face '(:inherit shadow))
                      " "))))
    (setq hs-set-up-overlay #'hs-display-code-line-counts))

#+end_src

** pretty-symbols

#+begin_src emacs-lisp

  (use-package prettify-symbols
    :ensure nil
    :hook (after-init . global-prettify-symbols-mode)
    :init
    (defun my/org-load-prettify-symbols ()
      (interactive)
      (set-face-background 'org-block-begin-line "#282c34")
      (push '("#+begin_latex latex" . ? ) prettify-symbols-alist)
      (push '("#+end_latex"         . ? ) prettify-symbols-alist)
      (push '("\\\\"                . ?↵) prettify-symbols-alist)
      (push '("\\l("                . ?\() prettify-symbols-alist)

      (defvar pretty-alist
        (cl-pairlis '("alpha" "beta" "gamma" "delta" "epsilon" "zeta" "eta"
                      "theta" "iota" "kappa" "lambda" "mu" "nu" "xi"
                      "omicron" "pi" "rho" "sigma_final" "sigma" "tau"
                      "upsilon" "phi" "chi" "psi" "omega")
                    (mapcar
                     (lambda (x) (make-char 'greek-iso8859-7 x))
                     (number-sequence 97 121))))
      (add-to-list 'pretty-alist '("rangle"   . ?\⟩))
      (add-to-list 'pretty-alist '("Gamma"    . 915))
      (add-to-list 'pretty-alist '("Delta"    . 916))
      (add-to-list 'pretty-alist '("vepsilon" . ?ε))
      (add-to-list 'pretty-alist '("Vepsilon" . ?Ɛ))
      (add-to-list 'pretty-alist '("Theta"    . 920))
      (add-to-list 'pretty-alist '("Lambda"   . 923))
      (add-to-list 'pretty-alist '("Xi"       . 926))
      (add-to-list 'pretty-alist '("Pi"       . 928))
      (add-to-list 'pretty-alist '("Sigma"    . 931))
      (add-to-list 'pretty-alist '("Upsilon"  . 933))
      (add-to-list 'pretty-alist '("vphi"     . ?φ))
      (add-to-list 'pretty-alist '("Phi"      . 934))
      (add-to-list 'pretty-alist '("Psi"      . 936))
      (add-to-list 'pretty-alist '("Omega"    . 937))
      (add-to-list 'pretty-alist '("mp"       . ?∓))
      (add-to-list 'pretty-alist '("pm"       . ?±))
      (add-to-list 'pretty-alist '("to"       . 8594))
      (add-to-list 'pretty-alist '("div"      . 247))
      (add-to-list 'pretty-alist '("ll"       . 8810))
      (add-to-list 'pretty-alist '("gg"       . 8811))
      (add-to-list 'pretty-alist '("leq"      . 8804))
      (add-to-list 'pretty-alist '("geq"      . 8805))
      (add-to-list 'pretty-alist '("neq"      . 8800))
      (add-to-list 'pretty-alist '("sim"      . 8764))
      (add-to-list 'pretty-alist '("approx"   . 8776))
      (add-to-list 'pretty-alist '("infty"    . 8734))
      (add-to-list 'pretty-alist '("perp"     . 8869))
      (add-to-list 'pretty-alist '("parallel" . 8741))
      (add-to-list 'pretty-alist '("angle"    . 8736))
      (add-to-list 'pretty-alist '("triangle" . ?Δ))
      (add-to-list 'pretty-alist '("degree"   . 9900))
      (add-to-list 'pretty-alist '("ua"       . 8593))
      (add-to-list 'pretty-alist '("da"       . 8595))
      (add-to-list 'pretty-alist '("uua"      . 8648))
      (add-to-list 'pretty-alist '("uda"      . 8645))
      (add-to-list 'pretty-alist '("forall"   . 8704))
      (add-to-list 'pretty-alist '("exists"   . 8707))
      (add-to-list 'pretty-alist '("r)"       . ?\)))
      (add-to-list 'pretty-alist '("equiv"    . ?≡))
      (add-to-list 'pretty-alist '("cdot"     . 8901))
      (add-to-list 'pretty-alist '("prec"     . ?≺))
      (add-to-list 'pretty-alist '("succ"     . ?≻))
      (add-to-list 'pretty-alist '("ldots"    . 8230))

      (mapc
       (lambda (x)
         (let ((word (car x))
               (char (cdr x)))
           (font-lock-add-keywords
            nil
            `((,(concat "\\(^\\|[^a-zA-Z0-9]\\)\\(" word "\\)[a-zA-Z]")
               (0 (progn
                    (decompose-region (match-beginning 2) (match-end 2))
                    nil)))))
           (font-lock-add-keywords
            nil
            `((,(concat "\\(^\\|[^a-zA-Z0-9]\\)\\(" word "\\)[^a-zA-Z]")
               (0 (progn
                    (compose-region (1- (match-beginning 2)) (match-end 2)
                                    ,char)
                    nil)))))))
       pretty-alist))

    (defun my/latex-load-prettify-symbols ()
      (interactive)
      (push '("\\pm"       . ?±)  prettify-symbols-alist)
      (push '("\\mp"       . ?∓)  prettify-symbols-alist)
      (push '("\\l("       . ?\() prettify-symbols-alist)
      (push '("\\r)"       . ?\)) prettify-symbols-alist)
      (push '("\\["        . ?\[) prettify-symbols-alist)
      (push '("\\]"        . ?\]) prettify-symbols-alist)
      (push '("\\{"        . ?\{) prettify-symbols-alist)
      (push '("\\}"        . ?\}) prettify-symbols-alist)
      (push '("\\l|"       . ?|)  prettify-symbols-alist)
      (push '("\\r|"       . ?|)  prettify-symbols-alist)
      (push '("\\Bigl("    . ?\() prettify-symbols-alist)
      (push '("\\Bigr)"    . ?\)) prettify-symbols-alist)
      (push '("\\Bigl["    . ?\[) prettify-symbols-alist)
      (push '("\\Bigr]"    . ?\]) prettify-symbols-alist)
      (push '("\\Bigl\\{"  . ?\{) prettify-symbols-alist)
      (push '("\\Bigr\\}"  . ?\}) prettify-symbols-alist)
      (push '("\\N"        . ?ℕ) prettify-symbols-alist)
      (push '("\\Z"        . ?ℤ) prettify-symbols-alist)
      (push '("\\Q"        . ?ℚ) prettify-symbols-alist)
      (push '("\\R"        . ?ℝ) prettify-symbols-alist)
      (push '("\\C"        . ?ℂ) prettify-symbols-alist)
      (push '("\\not\\in"  . ?∉) prettify-symbols-alist)
      (push '("\\ua"       . 8593) prettify-symbols-alist)
      (push '("\\da"       . 8595) prettify-symbols-alist)
      (push '("\\uua"      . ?⇈) prettify-symbols-alist)
      (push '("\\uda"      . ?⇅) prettify-symbols-alist)
      (push '("\\Lra"      . ?⇔) prettify-symbols-alist)
      (push '("\\La"       . ?⇐) prettify-symbols-alist)
      (push '("\\Ra"       . ?⇒) prettify-symbols-alist)
      (push '("\\Sqrt"     . ?√) prettify-symbols-alist)
      (push '("\\div"      . ?÷) prettify-symbols-alist)
      (push '("\\degree"   . ?⚬) prettify-symbols-alist)
      (push '("\\triangle" . ?Δ) prettify-symbols-alist)
      (push '("\\vepsilon" . ?ε) prettify-symbols-alist)
      (push '("\\Vepsilon" . ?Ɛ) prettify-symbols-alist)
      (push '("\\vphi"     . ?φ) prettify-symbols-alist)
      (push '("\\\\"       . ?↵) prettify-symbols-alist)))

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-edit)
	
#+end_src

* Elisp
:PROPERTIES:
:header-args: :tangle ./lisp/init-elisp.el
:END:

Emacs Lisp configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

#+end_src

** Emacs lisp mode

#+begin_src emacs-lisp

  (use-package elisp-mode
    :ensure nil
    :hook (emacs-lisp-mode . (lambda ()
                               "Disable the checkdoc checker."
                               (setq-local flycheck-disabled-checkers
                                           '(emacs-lisp-checkdoc))))
    :config
    (when (boundp 'elisp-flymake-byte-compile-load-path)
      (add-to-list 'elisp-flymake-byte-compile-load-path load-path))

    ;; Syntax highlighting of known Elisp symbols
    (use-package highlight-defined
      :hook (emacs-lisp-mode . highlight-defined-mode)
      :init
      (setq highlight-defined-face-use-itself t)))

#+end_src

** helpful

A better help buffer

#+begin_src emacs-lisp

  (use-package helpful
    :defines (counsel-describe-function-function
              counsel-describe-variable-function)
    :commands helpful--buffer
    :bind (([remap describe-key] . helpful-key)
           ([remap describe-symbol] . helpful-symbol)
           ("C-c C-d" . helpful-at-point)
           :map helpful-mode-map
           ("r" . remove-hook-at-point))
    :hook (helpful-mode . cursor-sensor-mode) ; for remove-advice button
    :init
    (with-eval-after-load 'counsel
      (setq counsel-describe-function-function #'helpful-callable
            counsel-describe-variable-function #'helpful-variable))

    (with-eval-after-load 'apropos
      ;; patch apropos buttons to call helpful instead of help
      (dolist (fun-bt '(apropos-function apropos-macro apropos-command))
        (button-type-put
         fun-bt 'action
         (lambda (button)
           (helpful-callable (button-get button 'apropos-symbol)))))
      (dolist (var-bt '(apropos-variable apropos-user-option))
        (button-type-put
         var-bt 'action
         (lambda (button)
           (helpful-variable (button-get button 'apropos-symbol))))))

    ;; Add remove buttons for advices
    ;; (define-advice helpful-update (:after () advice-remove-button)
    ;;   (when helpful--callable-p
    ;;     (add-button-to-remove-advice (helpful--buffer helpful--sym t) helpful--sym)))
    :config
    (with-no-warnings
      ;; Open the buffer in other window
      (defun my/helpful--navigate (button)
        "Navigate to the path this BUTTON represents."
        (find-file-other-window (substring-no-properties (button-get button 'path)))
        ;; We use `get-text-property' to work around an Emacs 25 bug:
        ;; http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=f7c4bad17d83297ee9a1b57552b1944020f23aea
        (-when-let (pos (get-text-property button 'position
                                           (marker-buffer button)))
          (helpful--goto-char-widen pos)))
      (advice-add #'helpful--navigate :override #'my/helpful--navigate)))

#+end_src

** End

#+begin_src emacs-lisp
	
  (provide 'init-elisp)

#+end_src

* Evil
:PROPERTIES:
:header-args: :tangle ./lisp/init-evil.el
:END:

Evil configuration.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

  (require 'init-basic)

#+end_src

** evil

#+begin_src emacs-lisp

  (use-package evil
    :hook (prog-mode . evil-mode)
    :bind ((:map evil-motion-state-map
                 ("RET" . nil)
                 ("M-k" . nil)
                 ("SPC" . nil)
                 ("DEL" . nil))
           (:map evil-normal-state-map
                 ("H"   . left-word)
                 ("L"   . right-word)
                 ("J"   . evil-forward-paragraph)
                 ("K"   . evil-backward-paragraph)
                 ("U"   . evil-redo)
                 ("M-h" . evil-window-increase-width)
                 ("M-l" . evil-window-decrease-width)
                 ("M-k" . evil-window-increase-height)
                 ("M-j" . evil-window-decrease-height)
                 ("C-p" . my/paste-from-clipboard)
                 ("y"   . my/copy-to-clipboard)
                 ("p"   . (lambda ()
                            (interactive)
                            (evil-paste-after 1)
                            (if (bound-and-true-p org-latex-mode)
                                (let ((start-point (mark t))
                                      (end-point   (point)))
                                  (if (> start-point end-point)
                                      (progn
                                        (setq-local temp-var end-point)
                                        (setq end-point   start-point
                                              start-point temp-var)))
                                  (org-display-inline-images nil t start-point end-point)
                                  (org--latex-preview-region start-point end-point))))))
           (:map evil-visual-state-map
                 ("H"   . left-word)
                 ("L"   . right-word)
                 ("J"   . evil-forward-paragraph)
                 ("K"   . evil-backward-paragraph)
                 ("p"   . my/paste-from-clipboard)
                 ("y"   . my/copy-to-clipboard))
           (:map evil-insert-state-map
                 ("M-k" . nil)
                 ("C-p" . my/paste-from-clipboard)))
    :custom (evil-want-keybinding nil)
    :config
    (global-set-key (kbd "C-l") 'evil-window-right)
    (global-set-key (kbd "C-h") 'evil-window-left)
    (global-set-key (kbd "C-k") 'evil-window-up)
    (global-set-key (kbd "C-j") 'evil-window-down)

    (define-key evil-insert-state-map [(shift backspace)] 'evil-delete-backward-word)

    (add-hook 'evil-visual-state-entry-hook (lambda () (prettify-symbols-mode -1)))
    (add-hook 'evil-visual-state-exit-hook  (lambda () (prettify-symbols-mode 1)))

    (evil-define-key '(normal insert visual)
      dashboard-mode-map (kbd "r") 'dashboard-jump-to-recents)
    (evil-define-key '(normal insert visual)
      dashboard-mode-map (kbd "p") 'dashboard-jump-to-projects)

    (use-package undo-fu
      :custom
      (evil-want-fine-undo  t)
      (evil-undo-system     'undo-fu)
      (evil-undo-function   'undo-fu-only-undo)
      (evil-redo-function   'undo-fu-only-redo))

    (defun my/paste-from-clipboard ()
      (interactive)
      (if (eq evil-visual-state-minor-mode t)
          (kill-region (region-beginning) (region-end)))
      (x-clipboard-yank)
      (goto-char (mark t)))

    (defun my/copy-to-clipboard ()
      (interactive)
      (setq select-enable-clipboard t)
      (call-interactively 'evil-yank)
      (setq select-enable-clipboard nil)))

#+end_src

** evil-collection

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :init
    (evil-collection-init))

#+end_src

** key-chord

#+begin_src emacs-lisp

  (use-package key-chord
    :after evil
    :hook (evil-mode . key-chord-mode)
    :config
    (setq key-chord-two-keys-delay 0.15)
    (key-chord-define evil-insert-state-map (kbd "jj") 'evil-normal-state)

    (define-key evil-insert-state-map "о" #'my/maybe-exit)

    (evil-define-command my/maybe-exit ()
      :repeat change
      (interactive)
      (insert "о")
      (let ((evt (read-event "" nil 0.18)))
        (cond
         ((null evt))
         ((and (integerp evt) (char-equal evt ?о))
          (delete-char -1)
          (evil-normal-state))
         (t (insert evt))))))

#+end_src

** End

#+begin_src emacs-lisp
	
  (provide 'init-evil)

#+end_src

* Funcs
:PROPERTIES:
:header-args: :tangle ./lisp/init-funcs.el
:END:

Define functions.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-
	
  (require 'cl-lib)
  (require 'init-custom)

#+end_src

** Open this file

#+begin_src emacs-lisp

  (defun my/open-org-file ()
    "Open `.emacs.d.org'."
    (interactive)
    (setq org-file (expand-file-name "emacs.d.org" user-emacs-directory))
    (message "Opening ~/.emacs.d/.emacs.d.org...")
    (find-file org-file)
    (message "Opening ~/.emacs.d/.emacs.d.org...done"))

#+end_src

** Misc

#+begin_src emacs-lisp

  (defun create-scratch-buffer ()
    "Create a scratch buffer."
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))

  (defun recompile-elpa ()
    "Recompile packages in elpa directory. Useful if you switch Emacs versions."
    (interactive)
    (if (fboundp 'async-byte-recompile-directory)
        (async-byte-recompile-directory package-user-dir)
      (byte-recompile-directory package-user-dir 0 t)))

  (defun centaur-set-variable (variable value &optional no-save)
    "Set the VARIABLE to VALUE, and return VALUE.

  Save to `custom-file' if NO-SAVE is nil."
    (customize-set-variable variable value))

  (defun my/line-looking-at (regexp)
    (save-excursion
      (beginning-of-line)
      (looking-at-p regexp)))

  (defun my/current-line-empty-p ()
    (save-excursion
      (beginning-of-line)
      (looking-at-p "^[[:space:]]*$")))

  (defun my/search-buffer-name (regexp)
    (catch 'my-catch
      (let ((buffer-temp-name (make-temp-name "scratch-"))
            (regexp-buffer-name nil))
        (switch-to-buffer buffer-temp-name)
        (insert (mapconcat (function buffer-name) (buffer-list) "\n"))
        (goto-char (point-min))
        (if (re-search-forward regexp nil t)
            (setq regexp-buffer-name (match-string-no-properties 0)))
        (kill-buffer buffer-temp-name)
        (throw 'my-catch regexp-buffer-name))))

  (defun my/lf-select-file (path)
    (interactive)
    (shell-command-to-string (concat "[ ! -d ~/.cache/emacs/ ] && mkdir -p ~/.cache/emacs;"
                                     "echo -n \"\" > ~/.cache/emacs/path;"
                                     "awesome-client 'create_emacs_fm(\"" path "\")';"
                                     "while ! [ -s ~/.cache/emacs/path ]; do sleep 0.1; done"))
    (shell-command-to-string "cat ~/.cache/emacs/path"))

  ;; (defun my/test ()
  ;;   (interactive)
  ;;   (if (my/line-looking-at "^\\*+[[:ascii:]]*")
  ;; 	  (message "test")))

#+end_src

** Pakcage repository (ELPA)

#+begin_src emacs-lisp

  (defun set-package-archives (archives &optional refresh async no-save)
    "Set the package archives (ELPA).

  REFRESH is non-nil, will refresh archive contents.
  ASYNC specifies whether to perform the downloads in the background.
  Save to `custom-file' if NO-SAVE is nil."
    (interactive
     (list
      (intern (completing-read "Select package archives: "
                               (mapcar #'car centaur-package-archives-alist)))))
    ;; Set option
    (centaur-set-variable 'centaur-package-archives archives no-save)

    ;; Refresh if need
    (and refresh (package-refresh-contents async))

    (message "Set package archives to `%s'" archives))
  (defalias 'centaur-set-package-archives #'set-package-archives)

#+end_src

** Update

#+begin_src emacs-lisp

  (defvar centaur--updating-packages nil)
  (defun update-packages (&optional sync)
    "Refresh package contents and update all packages.

  If SYNC is non-nil, the updating process is synchronous."
    (interactive)
    (when centaur--updating-packages
      (user-error "Still updating packages..."))

    (message "Updating packages...")
    (if (and (not sync)
             (require 'async nil t))
        (progn
          (setq centaur--updating-packages t)
          (async-start
           `(lambda ()
              ,(async-inject-variables "\\`\\(load-path\\)\\'")
              (require 'init-funcs)
              (require 'init-package)
              (upgrade-packages)
              (with-current-buffer auto-package-update-buffer-name
                (buffer-string)))
           (lambda (result)
             (setq centaur--updating-packages nil)
             (message "%s" result)
             (message "Updating packages...done"))))
      (progn
        (upgrade-packages)
        (message "Updating packages...done"))))
  (defalias 'centaur-update-packages #'update-packages)

#+end_src

** End

#+begin_src emacs-lisp
	
  (provide 'init-funcs)

#+end_src

* Highlight
:PROPERTIES:
:header-args: :tangle ./lisp/init-highlight.el
:END:

Highlighting configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-
	
#+end_src

** Highlight the current line

#+begin_src emacs-lisp

  (use-package hl-line
    :ensure nil
    :hook (after-init . global-hl-line-mode))

#+end_src

** Highlight matching parens

#+begin_src emacs-lisp

  (use-package paren
    :ensure nil
    :hook (after-init . show-paren-mode)
    :init (setq show-paren-when-point-inside-paren t
                show-paren-when-point-in-periphery t))

#+end_src

** Highlight symbols

#+begin_src emacs-lisp

  (use-package symbol-overlay
    :diminish
    :functions (turn-off-symbol-overlay turn-on-symbol-overlay)
    :custom-face (symbol-overlay-default-face ((t (:inherit (region bold)))))
    :bind (("M-i" . symbol-overlay-put)
           ("M-n" . symbol-overlay-jump-next)
           ("M-p" . symbol-overlay-jump-prev)
           ("M-N" . symbol-overlay-switch-forward)
           ("M-P" . symbol-overlay-switch-backward)
           ("M-C" . symbol-overlay-remove-all)
           ([M-f3] . symbol-overlay-remove-all))
    :hook ((prog-mode . symbol-overlay-mode)
           (iedit-mode . turn-off-symbol-overlay)
           (iedit-mode-end . turn-on-symbol-overlay))
    :init (setq symbol-overlay-idle-time 0.1)
    (with-eval-after-load 'all-the-icons
      (setq symbol-overlay-faces
            '((:inherit (all-the-icons-blue   bold) :inverse-video t)
              (:inherit (all-the-icons-pink   bold) :inverse-video t)
              (:inherit (all-the-icons-yellow bold) :inverse-video t)
              (:inherit (all-the-icons-purple bold) :inverse-video t)
              (:inherit (all-the-icons-red    bold) :inverse-video t)
              (:inherit (all-the-icons-orange bold) :inverse-video t)
              (:inherit (all-the-icons-green  bold) :inverse-video t)
              (:inherit (all-the-icons-cyan   bold) :inverse-video t))))
    :config
    ;; Disable symbol highlighting while selecting
    (defun turn-off-symbol-overlay (&rest _)
      "Turn off symbol highlighting."
      (interactive)
      (symbol-overlay-mode -1))
    (advice-add #'set-mark :after #'turn-off-symbol-overlay)

    (defun turn-on-symbol-overlay (&rest _)
      "Turn on symbol highlighting."
      (interactive)

      (when (derived-mode-p 'prog-mode)
        (symbol-overlay-mode 1)))
    (advice-add #'deactivate-mark :after #'turn-on-symbol-overlay))

#+end_src

** Highlight indentions

#+begin_src emacs-lisp

  (defun my/hig-restart ()
    (interactive)
    (if (eq major-mode 'emacs-lisp-mode)
        (progn
          (highlight-indent-guides-mode)
          (highlight-indent-guides-mode))))

  (leader-key-def
    "hr" 'my/hig-restart)

  (use-package highlight-indent-guides
    :diminish
    :hook (prog-mode  . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method     'character
          highlight-indent-guides-responsive 'top)

    (with-no-warnings
      ;; Don't display indentations in `swiper'
      (with-eval-after-load 'ivy
        (defun my/ivy-cleanup-indentation (str)
          "Clean up indentation highlighting in ivy minibuffer."
          (let ((pos 0)
                (next 0)
                (limit (length str))
                (prop 'highlight-indent-guides-prop))
            (while (and pos next)
              (setq next (text-property-not-all pos limit prop nil str))
              (when next
                (setq pos (text-property-any next limit prop nil str))
                (ignore-errors
                  (remove-text-properties next pos '(display nil face nil) str))))))
        (advice-add #'ivy-cleanup-string :after #'my/ivy-cleanup-indentation))))

#+end_src

** Colorize color names in buffers

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :diminish
    :hook ((css-mode  . rainbow-mode)
           (sh-mode   . rainbow-mode)
           (fish-mode . rainbow-mode)
           (yaml-mode . rainbow-mode)
           (conf-mode . rainbow-mode))
    :config
    (with-no-warnings
      ;; HACK: Use overlay instead of text properties to override `hl-line' faces.
      ;; @see https://emacs.stackexchange.com/questions/36420
      (defun my/rainbow-colorize-match (color &optional match)
        (let* ((match (or match 0))
               (ov (make-overlay (match-beginning match) (match-end match))))
          (overlay-put ov 'ovrainbow t)
          (overlay-put ov 'face `((:foreground ,(if (> 0.5 (rainbow-x-color-luminance color))
                                                    "white" "black"))
                                  (:background ,color)))))
      (advice-add #'rainbow-colorize-match :override #'my/rainbow-colorize-match)

      (defun my/rainbow-clear-overlays ()
        "Clear all rainbow overlays."
        (remove-overlays (point-min) (point-max) 'ovrainbow t))
      (advice-add #'rainbow-turn-off :after #'my/rainbow-clear-overlays)))

#+end_src

** Highlight TODO and similar keywords in comments and strings

#+begin_src emacs-lisp

  (use-package hl-todo
    :bind (:map hl-todo-mode-map
           ([C-f3] . hl-todo-occur)
           ("C-c t p" . hl-todo-previous)
           ("C-c t n" . hl-todo-next)
           ("C-c t o" . hl-todo-occur))
    :hook (after-init . global-hl-todo-mode)
    :config
    (dolist (keyword '("BUG" "DEFECT" "ISSUE"))
      (cl-pushnew `(,keyword . ,(face-foreground 'error)) hl-todo-keyword-faces))
    (dolist (keyword '("WORKAROUND" "HACK" "TRICK"))
      (cl-pushnew `(,keyword . ,(face-foreground 'warning)) hl-todo-keyword-faces)))
	
#+end_src

** Highlight uncommitted changes using VC

#+begin_src emacs-lisp

  (use-package diff-hl
    :custom-face
    (diff-hl-change ((t (:foreground ,(face-background 'highlight) :background nil))))
    (diff-hl-insert ((t (:background nil))))
    (diff-hl-delete ((t (:background nil))))
    :hook ((after-init . global-diff-hl-mode)
           (dired-mode . diff-hl-dired-mode))
    :init
    (setq diff-hl-draw-borders nil)
    :config
    ;; Highlight on-the-fly
    (diff-hl-flydiff-mode 1)

    ;; Set fringe style
    (setq-default fringes-outside-margins t)

    (with-no-warnings
      (defun my/diff-hl-fringe-bmp-function (_type _pos)
        "Fringe bitmap function for use as `diff-hl-fringe-bmp-function'."
        (define-fringe-bitmap 'my/diff-hl-bmp
          (vector #b11111100)
          1 8
          '(center t)))
      (setq diff-hl-fringe-bmp-function #'my/diff-hl-fringe-bmp-function)

      (unless (display-graphic-p)
        (setq diff-hl-margin-symbols-alist
              '((insert . " ") (delete . " ") (change . " ")
                (unknown . " ") (ignored . " ")))
        ;; Fall back to the display margin since the fringe is unavailable in tty
        (diff-hl-margin-mode 1)
        ;; Avoid restoring `diff-hl-margin-mode'
        (with-eval-after-load 'desktop
          (add-to-list 'desktop-minor-mode-table
                       '(diff-hl-margin-mode nil))))

      ;; Integration with magit
      (with-eval-after-load 'magit
        (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
        (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))))

#+end_src

** Highlight some operations

#+begin_src emacs-lisp

  (use-package volatile-highlights
    :diminish
    :hook (after-init . volatile-highlights-mode)
    :config
    (with-no-warnings
      (when (fboundp 'pulse-momentary-highlight-region)
        (defun my/vhl-pulse (beg end &optional _buf face)
          "Pulse the changes."
          (pulse-momentary-highlight-region beg end face))
        (advice-add #'vhl/.make-hl :override #'my/vhl-pulse))))

#+end_src

** Pulse current line

#+begin_src emacs-lisp

  (use-package pulse
    :ensure nil
    :custom-face
    (pulse-highlight-start-face ((t (:inherit region))))
    (pulse-highlight-face ((t (:inherit region))))
    :hook (((dumb-jump-after-jump
             imenu-after-jump)     . my/recenter-and-pulse)
           ((bookmark-after-jump
             magit-diff-visit-file
             next-error)           . my/recenter-and-pulse-line))
    :init
    (with-no-warnings
      (defun my/pulse-momentary-line (&rest _)
        "Pulse the current line."
        (pulse-momentary-highlight-one-line (point)))

      (defun my/pulse-momentary (&rest _)
        "Pulse the region or the current line."
        (if (fboundp 'xref-pulse-momentarily)
            (xref-pulse-momentarily)
          (my/pulse-momentary-line)))

      (defun my/recenter-and-pulse(&rest _)
        "Recenter and pulse the region or the current line."
        (recenter)
        (my/pulse-momentary))

      (defun my/recenter-and-pulse-line (&rest _)
        "Recenter and pulse the current line."
        (recenter)
        (my/pulse-momentary-line))

      (dolist (cmd '(recenter-top-bottom
                     other-window windmove-do-window-select
                     ace-window aw--select-window
                     pager-page-down pager-page-up
                     treemacs-select-window
                     symbol-overlay-basic-jump))
        (advice-add cmd :after #'my/pulse-momentary-line))

      (dolist (cmd '(pop-to-mark-command
                     pop-global-mark
                     goto-last-change))
        (advice-add cmd :after #'my/recenter-and-pulse))))

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-highlight)

#+end_src

* Ibuffer
:PROPERTIES:
:header-args: :tangle ./lisp/init-ibuffer.el
:END:

IBuffer configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

  (require 'init-funcs)
  (require 'init-treemacs)

#+end_src

** ibuffer

#+begin_src emacs-lisp

  (use-package ibuffer
    :after evil avy
    :ensure nil
    :bind (:map ibuffer-mode-map
                ("j" . evil-next-line)
                ("k" . evil-previous-line)
                ("h" . evil-backward-char)
                ("l" . evil-forward-char)
                ("/" . avy-goto-char-timer))
    :init (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold)))
    :config
    ;; Display icons for buffers
    (use-package all-the-icons-ibuffer
      :if (display-graphic-p)
      :init
      (all-the-icons-ibuffer-mode 1))

    (with-eval-after-load 'counsel
      (with-no-warnings
        (defun my/ibuffer-find-file ()
          (interactive)
          (let ((default-directory (let ((buf (ibuffer-current-buffer)))
                                     (if (buffer-live-p buf)
                                         (with-current-buffer buf
                                           default-directory)
                                       default-directory))))
            (counsel-find-file default-directory)))
        (advice-add #'ibuffer-find-file :override #'my/ibuffer-find-file))))

#+end_src

** ibuffer-projectile

Group ibuffer's list by project root

#+begin_src emacs-lisp

  (use-package ibuffer-projectile
    :functions all-the-icons-octicon ibuffer-do-sort-by-alphabetic
    :hook ((ibuffer . (lambda ()
                        (ibuffer-projectile-set-filter-groups)
                        (unless (eq ibuffer-sorting-mode 'alphabetic)
                          (ibuffer-do-sort-by-alphabetic)))))
    :config
    (setq ibuffer-projectile-prefix
          (if (display-graphic-p)
              (concat
               (all-the-icons-octicon "file-directory"
                                      :face ibuffer-filter-group-name-face
                                      :v-adjust 0.0
                                      :height 1.0)
               " ")
            "Project: ")))

#+end_src

** Keybinding

#+begin_src emacs-lisp

  (leader-key-def
    "l" (lambda ()
          (interactive)
          (if (equal major-mode 'treemacs-mode)
              (treemacs-visit-node-ace-horizontal-split)
            (progn
              (split-window-horizontally)
              (other-window 1)
              (ibuffer))))
    "j" (lambda ()
          (interactive)
          (if (equal major-mode 'treemacs-mode)
              (treemacs-visit-node-ace-vertical-split)
            (progn
              (split-window-vertically)
              (other-window 1)
              (ibuffer)))))

#+end_src

** End

#+begin_src emacs-lisp
	
  (provide 'init-ibuffer)

#+end_src

* Ivy
:PROPERTIES:
:header-args: :tangle ./lisp/init-ivy.el
:END:

Ivy configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

  (require 'init-custom)
  (require 'init-funcs)
  (require 'init-evil)

#+end_src

** counsel

#+begin_src emacs-lisp

  (use-package counsel
    :diminish ivy-mode counsel-mode
    :bind ((:map counsel-mode-map
                 ([remap swiper]             . counsel-grep-or-swiper)
                 ([remap swiper-backward]    . counsel-grep-or-swiper-backward)
                 ([remap dired]              . counsel-dired)
                 ([remap set-variable]       . counsel-set-variable)
                 ([remap insert-char]        . counsel-unicode-char)
                 ([remap recentf-open-files] . counsel-recentf))
           (:map ivy-minibuffer-map
                 ("M-j" . ivy-next-line)
                 ("M-k" . ivy-previous-line)))
    :hook ((after-init . ivy-mode)
           (ivy-mode   . counsel-mode))
    :init
    (setq enable-recursive-minibuffers t) ; Allow commands in minibuffers

    (setq ivy-use-selectable-prompt   t
          ivy-use-virtual-buffers     t    ; Enable bookmarks and recentf
          ivy-height                  12
          ivy-fixed-height-minibuffer t
          ivy-count-format            "%d/%d "
          ivy-on-del-error-function   nil
          ivy-initial-inputs-alist    nil
          ivy-extra-directories       nil)

    (setq swiper-action-recenter t)

    (setq counsel-find-file-at-point t)

    ;; Use the faster search tool: ripgrep (`rg')
    (when (executable-find "rg")
      (setq counsel-grep-base-command "rg -S --no-heading --line-number --color never %s %s"))
    :config
    (with-no-warnings
      ;; Display an arrow with the selected item
      (defun my/ivy-format-function-arrow (cands)
        "Transform CANDS into a string for minibuffer."
        (ivy--format-function-generic
         (lambda (str)
           (concat (if (and (bound-and-true-p all-the-icons-ivy-rich-mode)
                            (>= (length str) 1)
                            (string= " " (substring str 0 1)))
                       ">"
                     "> ")
                   (ivy--add-face str 'ivy-current-match)))
         (lambda (str)
           (concat (if (and (bound-and-true-p all-the-icons-ivy-rich-mode)
                            (>= (length str) 1)
                            (string= " " (substring str 0 1)))
                       " "
                     "  ")
                   str))
         cands
         "\n"))
      (setf (alist-get 't ivy-format-functions-alist) #'my/ivy-format-function-arrow)

      ;; Pre-fill search keywords
      ;; @see https://www.reddit.com/r/emacs/comments/b7g1px/withemacs_execute_commands_like_marty_mcfly/
      (defvar my/ivy-fly-commands
        '(query-replace-regexp
          flush-lines keep-lines ivy-read
          swiper swiper-backward swiper-all
          swiper-isearch swiper-isearch-backward
          lsp-ivy-workspace-symbol lsp-ivy-global-workspace-symbol
          counsel-grep-or-swiper counsel-grep-or-swiper-backward
          counsel-grep counsel-ack counsel-ag counsel-rg counsel-pt))
      (defvar-local my/ivy-fly--travel nil)

      (defun my/ivy-fly-back-to-present ()
        (cond ((and (memq last-command my/ivy-fly-commands)
                    (equal (this-command-keys-vector) (kbd "M-p")))
               ;; repeat one time to get straight to the first history item
               (setq unread-command-events
                     (append unread-command-events
                             (listify-key-sequence (kbd "M-p")))))
              ((or (memq this-command '(self-insert-command
                                        ivy-forward-char
                                        ivy-delete-char delete-forward-char
                                        end-of-line mwim-end-of-line
                                        mwim-end-of-code-or-line mwim-end-of-line-or-code
                                        yank ivy-yank-word counsel-yank-pop))
                   (equal (this-command-keys-vector) (kbd "M-n")))
               (unless my/ivy-fly--travel
                 (delete-region (point) (point-max))
                 (when (memq this-command '(ivy-forward-char
                                            ivy-delete-char delete-forward-char
                                            end-of-line mwim-end-of-line
                                            mwim-end-of-code-or-line
                                            mwim-end-of-line-or-code))
                   (insert (ivy-cleanup-string ivy-text))
                   (when (memq this-command '(ivy-delete-char delete-forward-char))
                     (beginning-of-line)))
                 (setq my/ivy-fly--travel t)))))

      (defun my/ivy-fly-time-travel ()
        (when (memq this-command my/ivy-fly-commands)
          (let* ((kbd (kbd "M-n"))
                 (cmd (key-binding kbd))
                 (future (and cmd
                              (with-temp-buffer
                                (when (ignore-errors
                                        (call-interactively cmd) t)
                                  (buffer-string))))))
            (when future
              (save-excursion
                (insert (propertize (replace-regexp-in-string
                                     "\\\\_<" ""
                                     (replace-regexp-in-string
                                      "\\\\_>" ""
                                      future))
                                    'face 'shadow)))
              (add-hook 'pre-command-hook 'my/ivy-fly-back-to-present nil t)))))

      (add-hook 'minibuffer-setup-hook #'my/ivy-fly-time-travel)
      (add-hook 'minibuffer-exit-hook
                (lambda ()
                  (remove-hook 'pre-command-hook 'my/ivy-fly-back-to-present t)))

      ;; Improve search experience of `swiper' and `counsel'
      (defun my/ivy-switch-to-swiper (&rest _)
        "Switch to `swiper' with the current input."
        (swiper ivy-text))

      (defun my/ivy-switch-to-swiper-isearch (&rest _)
        "Switch to `swiper-isearch' with the current input."
        (swiper-isearch ivy-text))

      (defun my/ivy-switch-to-swiper-all (&rest _)
        "Switch to `swiper-all' with the current input."
        (swiper-all ivy-text))

      (defun my/ivy-switch-to-rg-dwim (&rest _)
        "Switch to `rg-dwim' with the current input."
        (rg-dwim default-directory))

      (defun my/ivy-switch-to-counsel-rg (&rest _)
        "Switch to `counsel-rg' with the current input."
        (counsel-rg ivy-text default-directory))

      (defun my/ivy-switch-to-counsel-git-grep (&rest _)
        "Switch to `counsel-git-grep' with the current input."
        (counsel-git-grep ivy-text default-directory))

      (defun my/ivy-switch-to-counsel-find-file (&rest _)
        "Switch to `counsel-find-file' with the current input."
        (counsel-find-file ivy-text))

      (defun my/ivy-switch-to-counsel-fzf (&rest _)
        "Switch to `counsel-fzf' with the current input."
        (counsel-fzf ivy-text default-directory))

      (defun my/ivy-switch-to-counsel-git (&rest _)
        "Switch to `counsel-git' with the current input."
        (counsel-git ivy-text))

      (defun my/swiper-toggle-counsel-rg ()
        "Toggle `counsel-rg' and `swiper'/`swiper-isearch' with the current input."
        (interactive)
        (ivy-quit-and-run
          (if (memq (ivy-state-caller ivy-last) '(swiper swiper-isearch))
              (my/ivy-switch-to-counsel-rg)
            (my/ivy-switch-to-swiper-isearch))))
      (bind-key "<C-return>" #'my/swiper-toggle-counsel-rg swiper-map)
      (bind-key "<C-return>" #'my/swiper-toggle-counsel-rg counsel-ag-map)

      (with-eval-after-load 'rg
        (defun my/swiper-toggle-rg-dwim ()
          "Toggle `rg-dwim' with the current input."
          (interactive)
          (ivy-quit-and-run
            (rg-dwim default-directory)))
        (bind-key "<M-return>" #'my/swiper-toggle-rg-dwim swiper-map)
        (bind-key "<M-return>" #'my/swiper-toggle-rg-dwim counsel-ag-map))

      (defun my/counsel-find-file-toggle-fzf ()
        "Toggle `counsel-fzf' with the current `counsel-find-file' input."
        (interactive)
        (ivy-quit-and-run
          (counsel-fzf (or ivy-text "") default-directory)))
      (bind-key "<C-return>" #'my/counsel-find-file-toggle-fzf counsel-find-file-map)

      (defun my/swiper-toggle-rg-dwim ()
        "Toggle `rg-dwim' with the current input."
        (interactive)
        (ivy-quit-and-run (my/ivy-switch-to-rg-dwim)))
      (bind-key "<M-return>" #'my/swiper-toggle-rg-dwim swiper-map)
      (bind-key "<M-return>" #'my/swiper-toggle-rg-dwim counsel-ag-map)

      ;; More actions
      (ivy-add-actions
       #'swiper-isearch
       '(("r" my/ivy-switch-to-counsel-rg "rg")
         ("d" my/ivy-switch-to-rg-dwim "rg dwim")
         ("s" my/ivy-switch-to-swiper "swiper")
         ("a" my/ivy-switch-to-swiper-all "swiper all")))

      (ivy-add-actions
       #'swiper
       '(("r" my/ivy-switch-to-counsel-rg "rg")
         ("d" my/ivy-switch-to-rg-dwim "rg dwim")
         ("s" my/ivy-switch-to-swiper-isearch "swiper isearch")
         ("a" my/ivy-switch-to-swiper-all "swiper all")))

      (ivy-add-actions
       #'swiper-all
       '(("g" my/ivy-switch-to-counsel-git-grep "git grep")
         ("r" my/ivy-switch-to-counsel-rg "rg")
         ("d" my/ivy-switch-to-rg-dwim "rg dwim")
         ("S" my/ivy-switch-to-swiper "swiper")))

      (ivy-add-actions
       #'counsel-rg
       '(("s" my/ivy-switch-to-swiper-isearch "swiper isearch")
         ("S" my/ivy-switch-to-swiper "swiper")
         ("a" my/ivy-switch-to-swiper-all "swiper all")
         ("d" my/ivy-switch-to-rg-dwim "rg dwim")))

      (ivy-add-actions
       #'counsel-git-grep
       '(("s" my/ivy-switch-to-swiper-isearch "swiper isearch")
         ("S" my/ivy-switch-to-swiper "swiper")
         ("r" my/ivy-switch-to-rg-dwim "rg")
         ("d" my/ivy-switch-to-rg-dwim "rg dwim")
         ("a" my/ivy-switch-to-swiper-all "swiper all")))

      (ivy-add-actions
       #'counsel-find-file
       '(("g" my/ivy-switch-to-counsel-git "git")
         ("z" my/ivy-switch-to-counsel-fzf "fzf")))

      (ivy-add-actions
       #'counsel-git
       '(("f" my/ivy-switch-to-counsel-find-file "find file")
         ("z" my/ivy-switch-to-counsel-fzf "fzf")))

      (ivy-add-actions
       'counsel-fzf
       '(("f" my/ivy-switch-to-counsel-find-file "find file")
         ("g" my/ivy-switch-to-counsel-git "git")))

      ;; Integration with `projectile'
      (with-eval-after-load 'projectile
        (setq projectile-completion-system 'ivy))

      ;; Integration with `magit'
      (with-eval-after-load 'magit
        (setq magit-completing-read-function 'ivy-completing-read)))

    ;; Better sorting and filtering
    (use-package prescient
      :commands prescient-persist-mode
      :init (prescient-persist-mode 1))

    (use-package ivy-prescient
      :commands ivy-prescient-re-builder
      :custom-face
      (ivy-minibuffer-match-face-1 ((t (:inherit font-lock-doc-face :foreground nil))))
      :init
      (defun ivy-prescient-non-fuzzy (str)
        "Generate an Ivy-formatted non-fuzzy regexp list for the given STR.
  This is for use in `ivy-re-builders-alist'."
        (let ((prescient-filter-method '(literal regexp)))
          (ivy-prescient-re-builder str)))

      (setq ivy-prescient-retain-classic-highlighting t
            ivy-re-builders-alist
            '((counsel-ag                      . ivy-prescient-non-fuzzy)
              (counsel-rg                      . ivy-prescient-non-fuzzy)
              (counsel-pt                      . ivy-prescient-non-fuzzy)
              (counsel-grep                    . ivy-prescient-non-fuzzy)
              (counsel-imenu                   . ivy-prescient-non-fuzzy)
              (counsel-yank-pop                . ivy-prescient-non-fuzzy)
              (swiper                          . ivy-prescient-non-fuzzy)
              (swiper-isearch                  . ivy-prescient-non-fuzzy)
              (swiper-all                      . ivy-prescient-non-fuzzy)
              (lsp-ivy-workspace-symbol        . ivy-prescient-non-fuzzy)
              (lsp-ivy-global-workspace-symbol . ivy-prescient-non-fuzzy)
              (insert-char                     . ivy-prescient-non-fuzzy)
              (counsel-unicode-char            . ivy-prescient-non-fuzzy)
              (t                               . ivy-prescient-re-builder))
            ivy-prescient-sort-commands
            '(:not swiper swiper-isearch ivy-switch-buffer
                   lsp-ivy-workspace-symbol ivy-resume ivy--restore-session
                   counsel-grep counsel-git-grep counsel-rg counsel-ag
                   counsel-ack counsel-fzf counsel-pt counsel-imenu
                   counsel-org-capture counsel-load-theme counsel-yank-pop
                   counsel-recentf counsel-buffer-or-recentf))

      (ivy-prescient-mode 1))

    ;; Ivy integration for Projectile
    (use-package counsel-projectile
      :hook (counsel-mode . counsel-projectile-mode)
      :init
      (setq counsel-projectile-grep-initial-input '(ivy-thing-at-point))))

#+end_src

** swiper

#+begin_src emacs-lisp

  (use-package swiper
    :after evil
    :config
    (leader-key-def "f" 'swiper))

#+end_src

** ivy-rich

More friendly display transformer for Ivy

#+begin_src emacs-lisp

  (use-package ivy-rich
    :hook (;; Must load after `counsel-projectile'
           (counsel-projectile-mode . ivy-rich-mode)
           (ivy-rich-mode           . (lambda ()
                                        "Use abbreviate in `ivy-rich-mode'."
                                        (setq ivy-virtual-abbreviate
                                              (or (and ivy-rich-mode 'abbreviate) 'name)))))
    :init
    ;; For better performance
    (setq ivy-rich-parse-remote-buffer nil))

#+end_src

** all-the-icons-ivy-rich

Better experience with icons
Enable it before`ivy-rich-mode' for better performance

#+begin_src emacs-lisp

  (use-package all-the-icons-ivy-rich
    :if (display-graphic-p)
    :hook (ivy-mode . all-the-icons-ivy-rich-mode))

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-ivy)
	
#+end_src

* Org mode
:PROPERTIES:
:header-args: :tangle ./lisp/init-org.el
:END:

Org configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

  (require 'init-evil)
  (require 'init-basic)

#+end_src

** General configuration

#+begin_src emacs-lisp

  (use-package org
    :defer t
    :after yasnippet
    :hook (org-mode . (lambda ()
                        (turn-on-auto-fill)
                        (variable-pitch-mode 1)
                        (diff-hl-mode 0)
                        ;; Disable in electic-pair-mode in latex fragment
                        (setq-local electric-pair-inhibit-predicate
                                    `(lambda (c)
                                       (if (or (char-equal c ?<)
                                               (texmathp))
                                           t
                                         (,electric-pair-inhibit-predicate c))))))
    :config
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (setq org-ellipsis                      " ▾ "
          org-src-fontify-natively          t
          org-src-tab-acts-natively         t
          org-edit-src-content-indentation  2
          org-hide-block-startup            nil
          org-src-preserve-indentation      nil
          org-cycle-separator-lines         2
          org-startup-folded                t
          org-src-window-setup              'current-window
          org-edit-src-persistent-message   nil
          org-return-follows-link           t
          org-startup-indented              t
          org-startup-with-inline-images    nil
          org-emphasis-alist                '(("*" bold)
                                              ("/" italic)
                                              ("_" underline)))

    (setcar (nthcdr 4 org-emphasis-regexp-components) 10)
    (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)

    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    (use-package org-bullets
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.15)
                    (org-level-3 . 1.10)
                    (org-level-4 . 1.05)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "SauceCodePro Nerd Font" :weight 'regular :height (cdr face)))

    ;; set local scroll-margin
    (add-hook 'org-mode-hook (lambda ()
                               (set (make-variable-buffer-local 'scroll-margin) 0)))

    (use-package visual-fill-column
      :hook (org-mode . visual-fill-column-mode)
      :config
      (setq-default visual-fill-column-width       110
                    visual-fill-column-center-text t))

    (use-package org-auto-tangle
      :hook (org-mode . org-auto-tangle-mode))

#+end_src

** worf

#+begin_src emacs-lisp

  (use-package worf
    :after evil
    :bind ((:map evil-normal-state-map
                 ("SPC t"           . worf-goto))
           (:map worf-mode-map
                 ("<S-iso-lefttab>" . nil)
                 ("["               . nil)
                 ("]"               . nil)))
    :hook (org-mode . worf-mode))

#+end_src

** LaTeX

#+begin_src emacs-lisp

  (setq org-latex-toc-command    "\\tableofcontents \\clearpage"
        org-format-latex-options (plist-put org-format-latex-options :scale 1.6)
        org-latex-create-formula-image-program 'imagemagick)

  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
                    [NO-DEFAULT-PACKAGES]
                    [PACKAGES]
                    [EXTRA]"
                   ("\\part{%s}"          . "\\part*{%s}")
                   ("\\section{%s}"       . "\\section*{%s}")
                   ("\\subsection{%s}"    . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}"     . "\\paragraph*{%s}"))))

  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode)
    :config
    (setq org-fragtog-preview-delay 0.25))

  (defun my/update-theorem-and-lemma-counts ()
    (interactive)
    (setq latex-theorem-count 1
          latex-lemma-count   1)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "\\\\begin{theorem}" nil t)
        (setq latex-theorem-count (1+ latex-theorem-count)))
      (goto-char (point-min))
      (while (re-search-forward "\\\\begin{lemma}" nil t)
        (setq latex-lemma-count (1+ latex-lemma-count)))))

  (defun my/change-environment ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (if (save-excursion (re-search-forward "align" nil t))
          (replace-regexp "align" "gather")
        (replace-regexp "gather" "align"))))

  (add-to-list 'display-buffer-alist '("*Async Shell Command*" display-buffer-no-window (nil)))

  (defun my/org-latex-export ()
    (interactive)
    (setq tex-file-name (org-latex-export-to-latex))
    (shell-command-to-string (concat
                              "sd '^\\\\begin\\{theorem\\}' '\\\\begin{boxtheorem}' ./" tex-file-name ";"
                              "sd '^\\\\end\\{theorem\\}' '\\\\end{boxtheorem}' ./" tex-file-name ";"
                              "sd '^\\\\begin\\{lemma\\}' '\\\\begin{boxlemma}' ./" tex-file-name ";"
                              "sd '^\\\\end\\{lemma\\}' '\\\\end{boxlemma}' ./" tex-file-name ";"))
    (setq pdf-file-name (org-latex-compile tex-file-name))
    (async-shell-command (concat "evince " pdf-file-name) nil nil))

  (defun my/get-org-latex-fragment-image ()
    (interactive)
    (catch 'my-catch
      (let* ((processing-info
              (cdr (assq org-preview-latex-default-process org-preview-latex-process-alist)))
             (face (face-at-point))
             ;; Get the colors from the face at point.
             (fg
              (let ((color (plist-get org-format-latex-options
                                      :foreground)))
                (if 'forbuffer
                    (cond
                     ((eq color 'auto)
                      (face-attribute face :foreground nil 'default))
                     ((eq color 'default)
                      (face-attribute 'default :foreground nil))
                     (t color))
                  color)))
             (bg
              (let ((color (plist-get org-format-latex-options
                                      :background)))
                (if 'forbuffer
                    (cond
                     ((eq color 'auto)
                      (face-attribute face :background nil 'default))
                     ((eq color 'default)
                      (face-attribute 'default :background nil))
                     (t color))
                  color)))
             (value (org-element-property :value (org-element-context)))
             (hash (sha1 (prin1-to-string
                          (list org-format-latex-header
                                org-latex-default-packages-alist
                                org-latex-packages-alist
                                org-format-latex-options
                                'forbuffer value fg bg))))
             (imagetype (or (plist-get processing-info :image-output-type) "png"))
             (prefix (concat org-preview-latex-image-directory "org-ltximg"))
             (absprefix (expand-file-name prefix default-directory))
             (movefile (format "%s_%s.%s" absprefix hash imagetype)))
        (throw 'my-catch movefile))))

  (defun my/view-org-fragment ()
    (interactive)
    (unless (bound-and-true-p my/latex-window-frame)
      (async-start
       (progn
         (setq latex-fragment-buffer (get-buffer-create " *latex-fragment*"))
         (let ((latex-image-file   nil)
               (latex-image        nil)
               (latex-image-width  nil)
               (latex-image-height nil))
           (save-excursion
             (forward-char)
             (re-search-backward "(")
             (re-search-forward  "[[:digit:]]+")
             (re-search-backward (concat "\\\\tag{" (match-string-no-properties 0) "}"))
             (setq latex-image-file   (my/get-org-latex-fragment-image)
                   latex-image        (create-image latex-image-file)
                   latex-image-width  (car (image-size latex-image t))
                   latex-image-height (cdr (image-size latex-image t))))
           (with-current-buffer latex-fragment-buffer
             (insert "\n   ")
             (insert-image latex-image))
           (if (or (eq latex-image-height 85)
                   (eq latex-image-height 31))
               (setq latex-image-height (+ latex-image-height 10)))
           (setq my/latex-window-frame (posframe-show
                                        latex-fragment-buffer
                                        :position (point)
                                        :font "SauceCodePro Nerd Font 6"
                                        :width (floor (* latex-image-width 0.21))
                                        :height (+ 4 (floor (/ (- latex-image-height 22) 10.55)))
                                        :border-width 2
                                        :border-color "#32424b"
                                        :override-parameters '((parent-frame . nil)))))))
      (add-hook 'post-command-hook #'my/hide-org-fragment)))

  (defun my/hide-org-fragment ()
    (interactive)
    (let ((current-postiton (point)))
      (unless (equal current-postiton my/previous-position)
        (if my/latex-window-frame
            (progn
              (posframe-delete-frame latex-fragment-buffer)
              (setq my/latex-window-frame nil)
              (evil-delete-buffer latex-fragment-buffer)
              (remove-hook 'post-command-hook #'my/hide-org-fragment))))))

  (defun my/org-latex-mode ()
    (interactive)
    (setq-local org-src-window-setup    'split-window-below
                company-box-enable-icon nil
                org-latex-mode          t)
    (aas-activate-for-major-mode)
    (visual-line-mode t)
    (my/update-theorem-and-lemma-counts)
    (my/org-load-prettify-symbols)
    (my/remove-images)
    (add-hook 'org-pre-cycle-hook
              (lambda (arg)
                (cond ((eq arg 'children) (progn
                                            (org-narrow-to-subtree)
                                            (save-excursion
                                              (goto-char (point-min))
                                              (search-forward-regexp "^\*+ " nil t 2)
                                              (org-display-inline-images nil t (point-min) (point))
                                              (org--latex-preview-region (point-min) (point)))
                                            (widen)))
                      ((eq arg 'subtree)  (progn
                                            (org-narrow-to-subtree)
                                            (org-display-inline-images nil t (point-min) (point-max))
                                            (save-excursion
                                              (goto-char (point-min))
                                              (while (re-search-forward "^\\*+" nil t)
                                                (org-latex-preview nil)))
                                            (widen)))
                      ((eq arg 'folded)   (if (my/line-looking-at "^\\*+[[:ascii:]]*")
                                              (progn
                                                (org-narrow-to-subtree)
                                                (save-excursion
                                                  (goto-char (point-min))
                                                  (while (re-search-forward "^\\*+" nil t)
                                                    (org-latex-preview '(4))))
                                                (mapc #'delete-overlay (overlays-in (point-min) (point-max)))
                                                (widen))))))))

#+end_src

** Images

#+begin_src emacs-lisp

  (defun my/inkscape-figures-create ()
    (interactive)
    (setq img-file-path (shell-command-to-string "inkscape-figures create"))
    (if (not (equal img-file-path ""))
        (progn
          (insert img-file-path)
          (if (not (equal org-inline-image-overlays nil))
              (org-toggle-inline-images))
          (org-toggle-inline-images))
      (progn
        (evil-previous-line)
        (kill-whole-line 2))))

  (defun my/inkscape-figures-edit (line-str)
    (interactive)
    (setq file-name (replace-regexp-in-string "\\[\\|\\]" "" line-str))
    (shell-command-to-string (concat "inkscape-figures edit " file-name))
    (org-toggle-inline-images)
    (org-toggle-inline-images))

  (defun my/insert-image ()
    (interactive)
    (let ((image-path   (my/lf-select-file "~/Pictures/screenshots"))
          (image        nil)
          (image-width  nil)
          (image-height nil))
      (unless (equal image-path "cancel")
        (setq image        (create-image image-path)
              image-width  (car (image-size image t))
              image-height (cdr (image-size image t)))
        (if (or (> image-width 1050)
                (> image-height 600))
            (shell-command-to-string (concat "convert "
                                             image-path
                                             " -quality 100 -resize 1050x600 "
                                             image-path)))
        (setq image-path (shell-command-to-string (concat "inkscape-figures move " image-path)))
        (insert (concat "[[" image-path "]]"))
        (org-display-inline-images nil t (point-at-bol) (point-at-eol)))))

  (defun my/remove-images ()
    (interactive)
    (message "Removing unused images...")
    (setq used-file-names-str "unused_name")
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "\\[\\[\\./images/.+\\]\\]" nil t)
        (setq used-file-names-str (concat used-file-names-str
                                          "\\|"
                                          (replace-regexp-in-string "\\[\\|\\]"
                                                                    ""
                                                                    (match-string-no-properties 0))))))
    (shell-command-to-string (concat "find ./images/ -type f | grep -v \"" used-file-names-str "\" | xargs rm"))
    (message "Removing unused images...done"))

#+end_src

** Keybindings

#+begin_src emacs-lisp

  (defun my/isearch-line-forward (regexp-p)
    (catch 'my-catch
      (narrow-to-region (line-beginning-position) (line-end-position))
      (if (search-forward regexp-p nil t nil)
          (progn
            (widen)
            (throw 'my-catch t)))
      (widen)))

  (defun my/just-one-space ()
    (insert "x")
    (if (my/isearch-line-forward "\\(")
        (progn
          (evil-backward-char 2)
          (delete-horizontal-space)))
    (backward-delete-char 1))

  (defun my/org-edit-special ()
    (interactive)
    (if (and (bound-and-true-p org-latex-mode)
             (looking-at "(\\|)\\|[[:digit:]]+"))
        (save-excursion
          (setq my/previous-position (point))
          (narrow-to-region (line-beginning-position) (line-end-position))
          (if (or (looking-at "(")
                  (re-search-backward "(" nil t))
              (progn
                (widen)
                (if (looking-at "([[:digit:]]+)")
                    (my/view-org-fragment)))
            (widen)))
      (let* ((line-str           (buffer-substring (line-beginning-position) (line-end-position)))
             (processed-line-str (replace-regexp-in-string "\\[\\[[[:word:]\\|\\.\\|/]*\\]\\]" "" line-str))
             (current-layout     (shell-command-to-string "xkb-switch -p")))
        (shell-command-to-string "xkb-switch -s us")
        (if (and (equal processed-line-str "")
                 (not (equal line-str "")))
            (my/inkscape-figures-edit line-str)
          (progn
            (org-edit-special)
            (toggle-truncate-lines)
            (setq-local previous-major-mode-is-org t)
            (if (equal current-layout "ru\n")
                (setq change-lang t)
              (setq change-lang nil)))))))

  (defun my/org-edit-src-exit ()
    (interactive)
    (yas-exit-all-snippets)
    (let ((latex-fragment nil))
      (if (equal (count-lines (point-min) (point-max)) 1)
          (progn
            (goto-char (- (point-max) 2))
            (delete-horizontal-space)
            (setq latex-fragment t))
        (setq latex-fragment nil))
      (org-edit-src-exit)
      (cond (change-lang                                   (shell-command-to-string "xkb-switch -n")))
      (cond ((bound-and-true-p org-jump-to-previous-block) (org-previous-block 1))
            (latex-fragment                                (progn
                                                             (if (org-in-item-p) (my/just-one-space))
                                                             (my/isearch-line-forward "\\)")
                                                             (org-latex-preview))))))

  (defun my/org-insert-item-or-heading ()
    (interactive)
    (if (org-in-item-p)
        (org-insert-item)
      (org-insert-heading)))

  (defun my/org-previous-visible-heading ()
    (interactive)
    (if (org-at-heading-p)
        (progn
          (save-excursion
            (previous-line)
            (if (org-at-heading-p)
                (setq prev-heading-folded t)
              (setq prev-heading-folded nil)))
          (if prev-heading-folded
              (outline-up-heading 1)
            (org-previous-visible-heading 1)))
      (org-previous-visible-heading 1)))

  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'evil-window-up)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'evil-window-down)
  (evil-define-key '(normal insert)        org-mode-map (kbd "M-f") 'org-footnote-action)
  (evil-define-key '(insert)               org-mode-map (kbd "C-i") 'my/org-insert-item-or-heading)
  (evil-define-key '(insert)               org-mode-map (kbd "M-i") (lambda ()
                                                                      (interactive)
                                                                      (my/org-edit-special)
                                                                      (evil-insert-state)))

  (leader-key-def
    "i"   'my/org-edit-special
    "m"   'org-mark-ring-goto
    "u"   'my/org-previous-visible-heading
    "d"   'org-next-visible-heading
    "ob"  'org-babel-tangle
    "op"  'org-latex-preview
    "oe"  'my/org-latex-export
    "ce"  'my/change-environment
    "rc"  'my/update-theorem-and-lemma-counts
    "TAB" 'evil-close-folds)

#+end_src

** Org config mode

#+begin_src emacs-lisp

  (defun my/org-config-mode ()
    (interactive)
    (setq org-jump-to-previous-block        t
          org-edit-src-auto-save-idle-delay 1
          org-auto-tangle-default           t))

#+end_src

** COMMENT Sidebar
*** Org sidebar

#+begin_src emacs-lisp

  (use-package org-sidebar
    :diminish t
    :init
    (setq org-sidebar-show nil)

    (defun my/org-sidebar-tree-toggle (open)
      (setq inhibit-message  t)
      (org-sidebar-tree-toggle)
      (if (equal open t)
          (select-window (get-buffer-window (my/search-buffer-name "^<tree>.*"))))
      (setq inhibit-message nil))

    (defun my/org-sidebar-toggle ()
      "Toggle the org-sidebar"
      (interactive)
      (let ((tree-buffer-name (my/search-buffer-name "^<tree>.*")))
        (cond ((equal (buffer-name (current-buffer)) tree-buffer-name) (progn
                                                                         (my/org-sidebar-tree-toggle nil)
                                                                         (setq org-sidebar-show nil)))
              ((equal org-sidebar-show t) (select-window (get-buffer-window tree-buffer-name)))
              (t                          (progn
                                            (my/org-sidebar-tree-toggle t)
                                            (setq org-sidebar-show   t
                                                  tree-buffer-window (get-buffer-window (my/search-buffer-name "^<tree>.*")))
                                            (window-resize tree-buffer-window -12 t t))))))

    (leader-key-def
      :keymap 'org-mode-map
      "n" 'my/org-sidebar-toggle)
    :config
    (evil-define-key '(normal) org-sidebar-tree-map (kbd "<tab>") 'org-sidebar-tree-cycle)
    (set-face-attribute 'header-line nil :background "#282c34" :foreground "#282c34"))

#+end_src

*** imenu-list

#+begin_src emacs-lisp

  (require 'imenu)

  (use-package imenu-list
    :after evil
    :init
    (setq imenu-list-focus-after-activation t
          imenu-list-idle-update-delay-time 0.2
          imenu-list-mode-line-format       nil
          imenu-list-position               'left
          imenu-list-size                   36)

    (defun my/org-sidebar-toggle ()
      "Toggle the org-sidebar"
      (interactive)
      (if (equal (buffer-name (current-buffer)) "*Ilist*")
          (imenu-list-smart-toggle)
        (progn
          (if (fboundp 'imenu-list-show)
              (progn
                (if (eq imenu-list-minor-mode nil)
                    (imenu-list-minor-mode))
                (imenu-list-show))
            (progn
              (imenu-list-smart-toggle)
              (setq-local evil-normal-state-cursor '(nil)))))))

    (evil-define-key '(normal) imenu-list-major-mode-map (kbd "q") 'imenu-list-smart-toggle)
    (evil-define-key '(normal) imenu-list-major-mode-map (kbd "<tab>") 'hs-toggle-hiding)

    (leader-key-def "n" 'my/org-sidebar-toggle)
    :config
    (set-face-attribute 'imenu-list-entry-face-0 nil :foreground "#51afef" :height 1.2 :weight 'regular)
    (set-face-attribute 'imenu-list-entry-face-1 nil :foreground "#c678dd" :height 1.15))

#+end_src

** COMMENT Org test

#+begin_src emacs-lisp

  (defun my/org-back-to-top-level-heading ()
    "Go back to the current top level heading."
    (interactive)
    (or (re-search-backward "^\* " nil t)
        (goto-char (point-min))))

  (defun ded/org-show-next-heading-tidily ()
    "Show next entry, keeping other entries closed."
    (interactive)
    (if (save-excursion (end-of-line) (outline-invisible-p))
        (progn (org-show-entry) (show-children))
      (outline-next-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))

  (defun ded/org-show-previous-heading-tidily ()
    "Show previous entry, keeping other entries closed."
    (interactive)
    (let ((pos (point)))
      (outline-previous-heading)
      (unless (and (< (point) pos) (bolp) (org-on-heading-p))
        (goto-char pos)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))

  (defun org-edit-preview-latex-fragment ()
    "Write latex fragment from source to parent buffer and preview it."
    (interactive)
    (org-src-in-org-buffer (org-preview-latex-fragment)))

#+end_src

** End

#+begin_src emacs-lisp

  )
	
  (provide 'init-org)

#+end_src

* Tex
:PROPERTIES:
:header-args: :tangle ./lisp/init-tex.el
:END:

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-
	
#+end_src

** Auctex

#+begin_src emacs-lisp

  (use-package auctex
    :hook ((LaTeX-mode . display-line-numbers-mode)
           (LaTeX-mode . turn-on-auto-fill)
           (LaTeX-mode . (lambda ()
                           (define-key LaTeX-mode-map "\C-j" 'nil)
                           (company-mode -1)
                           (my/latex-load-prettify-symbols))))
    :custom
    (TeX-auto-save                     t)
    (TeX-parse-self                    t)
    (TeX-PDF-mode                      t)
    (TeX-file-line-error               t)
    (TeX-source-correlate-start-server t)
    (preview-auto-cache-preamble       t)
    :config
    (setq-default TeX-master nil))

#+end_src

** COMMENT evil-tex

#+begin_src emacs-lisp

  (use-package evil-tex
    :hook (LaTeX-mode . evil-tex-mode))

#+end_src

** cdlatex

#+begin_src emacs-lisp

  (use-package cdlatex
    :after (evil yasnippet)
    :hook ((prog-mode  . turn-on-cdlatex)
           (cdlatex-tab . my/cdlatex-in-yas-field))
    :bind ((:map cdlatex-mode-map
                 ("<"     . nil)
                 ("("     . nil)
                 ("["     . nil)
                 ("{"     . nil)
                 ("|"     . nil)
                 ("_"     . nil)
                 ("'"     . nil)
                 ("`"     . nil)
                 ("$"     . nil))
           (:map evil-insert-state-map
                 ("<tab>" . expand-snippet-or-cdlatex-tab)))
    :config
    (defun do-yas-expand ()
      (let ((yas/fallback-behavior 'return-nil))
        (yas/expand)))

    (defun expand-snippet-or-cdlatex-tab ()
      (interactive)
      (if (or (not yas/minor-mode)
              (null (do-yas-expand)))
          (cdlatex-tab)))

    (defun my/cdlatex-in-yas-field ()
      ;; Check if we're at the end of the Yas field
      (when-let* ((_ (overlayp yas--active-field-overlay))
                  (end (overlay-end yas--active-field-overlay)))
        (if (>= (point) end)
            ;; Call yas-next-field if cdlatex can't expand here
            (let ((s (thing-at-point 'sexp)))
              (unless (and s (assoc (substring-no-properties s)
                                    cdlatex-command-alist-comb))
                (yas-next-field-or-maybe-expand)
                t))
          ;; otherwise expand and jump to the correct location
          (let (cdlatex-tab-hook minp)
            (setq minp
                  (min (save-excursion (cdlatex-tab)
                                       (point))
                       (overlay-end yas--active-field-overlay)))
            (goto-char minp) t)))))

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-tex)

#+end_src

* Package
:PROPERTIES:
:header-args: :tangle ./lisp/init-package.el
:END:

Emacs Package management configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

  (require 'init-custom)
  (require 'init-funcs)
	
#+end_src

** Save selected packages

#+begin_src emacs-lisp

  ;; HACK: DO NOT copy package-selected-packages to init/custom file forcibly.
  ;; https://github.com/jwiegley/use-package/issues/383#issuecomment-247801751
  (defun my/save-selected-packages (&optional value)
    "Set `package-selected-packages' to VALUE but don't save to `custom-file'."
    (when value
      (setq package-selected-packages value)))
  (advice-add 'package--save-selected-packages :override #'my/save-selected-packages)
	
#+end_src

** Set ELPA packages

#+begin_src emacs-lisp

  (set-package-archives centaur-package-archives nil nil t)
	
#+end_src

** Initialize packages

#+begin_src emacs-lisp

  (unless (bound-and-true-p package--initialized) ; To avoid warnings in 27
    (setq package-enable-at-startup nil)          ; To prevent initializing twice
    (package-initialize))

#+end_src

** use-pakcage

#+begin_src emacs-lisp

  ;; Setup `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Should set before loading `use-package'
  (eval-and-compile
    (setq use-package-always-ensure        t)
    (setq use-package-always-defer         t)
    (setq use-package-expand-minimally     t)
    (setq use-package-enable-imenu-support t))

  (eval-when-compile
    (require 'use-package))

  ;; Required by `use-package'
  (use-package diminish)
  (use-package bind-key)

#+end_src

** Update GPG keyring for GNU ELPA

#+begin_src emacs-lisp

  (use-package gnu-elpa-keyring-update)
	
#+end_src

** Auto update packages

#+begin_src emacs-lisp

  (use-package auto-package-update
    :init
    (setq auto-package-update-delete-old-versions t
          auto-package-update-hide-results t)
    (defalias 'upgrade-packages #'auto-package-update-now))

#+end_src

** End

#+begin_src emacs-lisp
	
  (provide 'init-package)

#+end_src

* Prog
:PROPERTIES:
:header-args: :tangle ./lisp/init-prog.el
:END:

General programming configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-
	
  (require 'init-custom)

#+end_src

** dump-mode

Jump to definition

#+begin_src emacs-lisp

  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g i" . dumb-jump-go-prompt)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window)
           ("C-M-j" . dumb-jump-hydra/body))
    :init
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq dumb-jump-prefer-searcher 'rg
          dumb-jump-selector        'ivy))

#+end_src

** css-mode

#+begin_src emacs-lisp

  (use-package css-mode
    :ensure nil
    :config
    (setq css-fontify-colors nil))

#+end_src

** makefile-mode

#+begin_src emacs-lisp

  (use-package makefile-mode
    :ensure nil
    :hook (makefile-mode . enable-tabs))

#+end_src

** lua-mode

#+begin_src emacs-lisp

  (use-package lua-mode
    :after evil
    :config
    (evil-define-key 'normal lua-mode-map (kbd "K") nil))

#+end_src

** Misc

#+begin_src emacs-lisp

  (use-package yaml-mode)
  (use-package vimrc-mode)
  (use-package fish-mode)

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-prog)
	
#+end_src

* Projectile
:PROPERTIES:
:header-args: :tangle ./lisp/init-projectile.el
:END:

Projectile configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-
	
#+end_src

** projectile

Manage and navigate projects

#+begin_src emacs-lisp

  (use-package projectile
    :diminish
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :hook (after-init . projectile-mode)
    :init
    (setq projectile-mode-line-prefix    ""
          projectile-sort-order          'recentf
          projectile-use-git-grep        t
          projectile-enable-caching      t
          projectile-project-search-path '("~/Cloud/Projects"
                                           "~/Nextcloud/Projects"
                                           "~/Projects"))
    :config
    (projectile-update-mode-line)         ; Update mode-line at the first time

    ;; Use the faster searcher to handle project files: ripgrep `rg'.
    (when (and (not (executable-find "fd"))
               (executable-find "rg"))
      (setq projectile-generic-command
            (let ((rg-cmd ""))
              (dolist (dir projectile-globally-ignored-directories)
                (setq rg-cmd (format "%s --glob '!%s'" rg-cmd dir)))
              (concat "rg -0 --files --color=never --hidden" rg-cmd)))))

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-projectile)
	
#+end_src

* Treemacs
:PROPERTIES:
:header-args: :tangle ./lisp/init-treemacs.el
:END:

Treemacs: A tree layout file explorer.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

  (require 'init-custom)
  (require 'init-evil)
  (require 'init-vcs)

#+end_src

** treemacs

#+begin_src emacs-lisp

  (use-package treemacs
    :after evil
    :commands (treemacs-follow-mode
               treemacs-filewatch-mode
               treemacs-git-mode)
    :bind (:map treemacs-mode-map
                ("d"   . treemacs-delete)
                ("r"   . treemacs-rename)
                ("C-n" . treemacs)
                ("C-/" . treemacs-helpful-hydra)
                ("C-j" . evil-window-down)
                :map evil-normal-state-map
                ("C-n" . my/treemacs-select-window)
                :map evil-visual-state-map
                ("C-n" . my/treemacs-select-window)
                :map evil-insert-state-map
                ("C-n" . my/treemacs-select-window))
    :custom-face (treemacs-git-modified-face ((t (:foreground "#51afef"))))
    :config
    (setq treemacs-collapse-dirs     0
          treemacs-sorting           'alphabetic-asc
          treemacs-follow-after-init t
          treemacs-width             30
          treemacs-file-event-delay  500)

    (defun my/treemacs-select-window ()
      (interactive)
      (if (equal major-mode 'treemacs-mode)
          (treemacs)
        (treemacs-select-window)))

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-git-mode 'deferred)

    (add-hook 'treemacs-mode-hook (lambda ()
                                    (setq-local evil-normal-state-cursor '(nil))
                                    (set (make-variable-buffer-local 'scroll-margin) 0))))

#+end_src

** treemacs-evil

#+begin_src emacs-lisp

  (use-package treemacs-evil
    :after treemacs evil)

#+end_src

** treemacs-projectile

#+begin_src emacs-lisp

  (use-package treemacs-projectile
    :after treemacs projectile
    :bind (:map projectile-command-map
           ("h" . treemacs-projectile)))

#+end_src

** treemacs-magit

#+begin_src emacs-lisp

  (use-package treemacs-magit
    :after treemacs magit
    :commands treemacs-magit--schedule-update
    :hook ((magit-post-commit
            git-commit-post-finish
            magit-post-stage
            magit-post-unstage)
           . treemacs-magit--schedule-update))

#+end_src

** End

#+begin_src emacs-lisp
	
  (provide 'init-treemacs)

#+end_src

* UI
:PROPERTIES:
:header-args: :tangle ./lisp/init-ui.el
:END:

Visual (UI) configurations for better lookings and appearances.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

  (require 'init-custom)
  (require 'init-funcs)

#+end_src

** Optimization

#+begin_src emacs-lisp

  (setq idle-update-delay 1.0)

  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  (setq fast-but-imprecise-scrolling t)
  (setq redisplay-skip-fontification-on-input t)

#+end_src

** Inhibit resizing frame

#+begin_src emacs-lisp

  (setq frame-inhibit-implied-resize t
        frame-resize-pixelwise       t)

#+end_src

** Theme

#+begin_src emacs-lisp

  ;; Make certain buffers grossly incandescent
  ;; Must before loading the theme
  (use-package solaire-mode
    :hook ((minibuffer-setup        . solaire-mode-fix-minibuffer)
           (server-after-make-frame . solaire-mode-fix-minibuffer))
    :custom
    (solaire-global-mode +1))

  (use-package doom-themes
    :after solaire-mode
    :hook (server-after-make-frame . (lambda ()
                                       (load-theme 'doom-one t)))
    :custom-face (doom-modeline-buffer-file ((t (:inherit (mode-line bold)))))
    :custom (doom-themes-treemacs-theme "doom-colors")
    :init
    (unless (daemonp)
      (load-theme 'doom-one t))
    :config
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable customized theme
    (doom-themes-treemacs-config))

#+end_src

** Dashboard

#+begin_src emacs-lisp

  (use-package page-break-lines
    :ensure t
    :demand t)

  (use-package dashboard
    :custom-face (dashboard-heading ((t (:inherit (font-lock-string-face bold)))))
    ;; :bind (("<f2>" . open-dashboard)
    ;;        :map dashboard-mode-map
    ;;        ("R"    . restore-previous-session)
    ;;        ("L"    . restore-session)
    ;;        ("U"    . update-config-and-packages)
    ;;        ("q"    . quit-dashboard))
    :bind (:map dashboard-mode-map
                ([remap dashboard-next-line]     . widget-forward)
                ([remap dashboard-previous-line] . widget-backward))
    :init
    (defun my/dashboard-banner ()
      (defvar package-count 0)
      (when (bound-and-true-p package-alist)
        (setq package-count (length package-activated-list)))
      (when (boundp 'straight--profile-cache)
        (setq package-count (+ (hash-table-size straight--profile-cache) package-count)))
      (setq dashboard-init-info
            (format "%d packages loaded in %.3f seconds\n"
                    package-count
                    (float-time (time-subtract after-init-time before-init-time)))))

    (setq dashboard-startup-banner    'logo
          dashboard-page-separator    "\n\f\n"
          dashboard-center-content    t
          dashboard-show-shortcuts    nil
          dashboard-set-footer        nil
          dashboard-set-init-info     t
          dashboard-set-file-icons    t
          dashboard-set-heading-icons t
          dashboard-set-navigator     nil
          dashboard-items             '((projects  . 8)
                                        (recents   . 8))
          dashboard-heading-icons     '((recents   . "file-text")
                                        (projects  . "briefcase")))

    (add-hook 'after-init-hook                 'dashboard-refresh-buffer)
    (add-hook 'dashboard-mode-hook             'my/dashboard-banner)
    (add-hook 'dashboard-after-initialize-hook (lambda ()
                                                 (if (or (not (eq dashboard-projects-alist nil))
                                                         (not (eq dashboard-recentf-alist  nil)))
                                                     (widget-forward 1))))
    (add-hook 'dashboard-mode-hook             (lambda ()
                                                 (with-current-buffer "*dashboard*"
                                                   (setq-local evil-normal-state-cursor '(nil)
                                                               doom-modeline-height     34))
                                                 (if (or (not (eq dashboard-projects-alist nil))
                                                         (not (eq dashboard-recentf-alist  nil)))
                                                     (widget-forward 1))
                                                 (hl-line-mode t)))
    (dashboard-setup-startup-hook)
    ;; :config
    ;; (defvar dashboard-recover-layout-p nil
    ;; 	"Wether recovers the layout.")

    ;; (defun open-dashboard ()
    ;; 	"Open the *dashboard* buffer and jump to the first widget."
    ;; 	(interactive)
    ;; 	;; Check if need to recover layout
    ;; 	(if (> (length (window-list-1))
    ;;          ;; exclude `treemacs' window
    ;;          (if (and (fboundp 'treemacs-current-visibility)
    ;; 					(eq (treemacs-current-visibility) 'visible))
    ;;              2
    ;; 			 1))
    ;; 		(setq dashboard-recover-layout-p t))
    ;; 	(delete-other-windows)
    ;; 	;; Refresh dashboard buffer
    ;; 	(when (get-buffer dashboard-buffer-name)
    ;;     (kill-buffer dashboard-buffer-name))
    ;; 	(dashboard-insert-startupify-lists)
    ;; 	(switch-to-buffer dashboard-buffer-name)
    ;; 	;; Jump to the first section
    ;; 	(dashboard-jump-to-recent-files))

    ;; (defun restore-previous-session ()
    ;; 	"Restore the previous session."
    ;; 	(interactive)
    ;; 	(when (bound-and-true-p persp-mode)
    ;;     (restore-session persp-auto-save-fname)))

    ;; (defun restore-session (fname)
    ;; 	"Restore the specified session."
    ;; 	(interactive (list (read-file-name "Load perspectives from a file: "
    ;;                                      persp-save-dir)))
    ;; 	(when (bound-and-true-p persp-mode)
    ;;     (message "Restoring session...")
    ;;     (quit-window t)
    ;;     (condition-case-unless-debug err
    ;;         (persp-load-state-from-file fname)
    ;; 		(error "Error: Unable to restore session -- %s" err))
    ;;     (message "Restoring session...done")))

    ;; (defun quit-dashboard ()
    ;; 	"Quit dashboard window."
    ;; 	(interactive)
    ;; 	(quit-window t)
    ;; 	(when (and dashboard-recover-layout-p
    ;;              (bound-and-true-p winner-mode))
    ;;     (winner-undo)
    ;;     (setq dashboard-recover-layout-p nil)))
    )

#+end_src

** Mode-line
*** doom-modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :custom
    (doom-modeline-icon             t)
    (doom-modeline-minor-modes      t)
    (doom-modeline-unicode-fallback t)
    (doom-modeline-mu4e             nil)
    (doom-modeline-height           34)
    :hook (after-init . doom-modeline-mode)
    :init
    ;; Prevent flash of unstyled modeline at startup
    (unless after-init-time
      (setq doom-modeline--default-format mode-line-format)
      (setq-default mode-line-format nil)))

#+end_src

*** hide-mode-line

#+begin_src emacs-lisp

  (use-package hide-mode-line
    :hook (((completion-list-mode
             completion-in-region-mode) . hide-mode-line-mode)))

#+end_src

*** minions

A minor-mode menu for mode-line

#+begin_src emacs-lisp

  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

#+end_src

** Icons

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p)
    :init (unless (find-font (font-spec :name "all-the-icons"))
            (all-the-icons-install-fonts t)))

#+end_src

** Line numbers

Show native line numbers

#+begin_src emacs-lisp

  (use-package display-line-numbers
    :ensure nil
    :hook ((prog-mode . display-line-numbers-mode)
           (conf-mode . display-line-numbers-mode)
           (yaml-mode . display-line-numbers-mode)
           (text-mode . display-line-numbers-mode)
           (org-mode  . (lambda ()
                          (display-line-numbers-mode 0)))))

#+end_src

** Suppress GUI features

#+begin_src emacs-lisp

  (setq use-file-dialog                   nil
        use-dialog-box                    nil
        inhibit-startup-screen            t
        inhibit-startup-echo-area-message t)

#+end_src

** Display dividers between windows

#+begin_src emacs-lisp

  (setq window-divider-default-places       t
        window-divider-default-bottom-width 1
        window-divider-default-right-width  1)

  (add-hook 'window-setup-hook #'window-divider-mode)

#+end_src

** text-scale

Easily adjust the font size

#+begin_src emacs-lisp

  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-0") (lambda () (text-scale-mode 0)))

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-ui)
	
#+end_src

* Utils
:PROPERTIES:
:header-args: :tangle ./lisp/init-utils.el
:END:

Some usefule utilities

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-
	
#+end_src

** which-key

Display available keybindings in popup

#+begin_src emacs-lisp

  (use-package which-key
    :diminish
    :hook (after-init . which-key-mode)
    :init
    (setq which-key-max-description-length 30
          which-key-show-remaining-keys    t))

#+end_src

** real-auto-save

#+begin_src emacs-lisp

  (use-package real-auto-save
    :hook (find-file . real-auto-save-mode)
    :config
    (setq real-auto-save-interval 1))

#+end_src

** command-log-mode

#+begin_src emacs-lisp

  (use-package posframe)
  (use-package command-log-mode
    :after posframe)

  (setq my/command-window-frame nil)

  (defun my/toggle-command-window ()
    (interactive)
    (if my/command-window-frame
        (progn
          (posframe-delete-frame clm/command-log-buffer)
          (setq my/command-window-frame nil)
          (command-log-mode 0))
      (progn
        (command-log-mode t)
        (global-command-log-mode t)
        (with-current-buffer
            (setq clm/command-log-buffer
                  (get-buffer-create " *command-log*")))
        (setq my/command-window-frame
              (posframe-show
               clm/command-log-buffer
               :position `(,(- (x-display-pixel-width) 450) . 20)
               :width 40
               :height 7
               :min-width 40
               :min-height 7
               :background-color "#21242b"
               :internal-border-width 2
               :internal-border-color "#32424b"
               :override-parameters '((parent-frame . nil)))))))

  (leader-key-def
    "cl" 'my/toggle-command-window)

#+end_src

** COMMENT Search tools

Writable 'grep' buffer

#+begin_src emacs-lisp

  (use-package wgrep
    :init
    (setq wgrep-auto-save-buffer t
          wgrep-change-readonly-file t))

  ;; Fast search tool `ripgrep'
  (use-package rg
    :defines projectile-command-map
    :hook (after-init . rg-enable-default-bindings)
    :bind (:map rg-global-map
                ("c" . rg-dwim-current-dir)
                ("f" . rg-dwim-current-file)
                ("m" . rg-menu)
                :map rg-mode-map
                ("m" . rg-menu))
    :init (setq rg-group-result t
                rg-show-columns t)
    :config
    (cl-pushnew '("tmpl" . "*.tmpl") rg-custom-type-aliases)

    (with-eval-after-load 'projectile
      (defalias 'projectile-ripgrep #'rg-project)
      (bind-key "s R" #'rg-project projectile-command-map))

    (with-eval-after-load 'counsel
      (bind-keys
       :map rg-global-map
       ("R" . counsel-rg)
       ("F" . counsel-fzf))))

#+end_src

** COMMENT Process

#+begin_src emacs-lisp

  (use-package proced
    :ensure nil
    :init
    (setq-default proced-format 'verbose)
    (setq proced-auto-update-flag t
          proced-auto-update-interval 3))

#+end_src

** Misc

#+begin_src emacs-lisp

  (use-package copyit)                    ; copy path, url, etc.
  (use-package esup)                      ; Emacs startup profiler
  (use-package list-environment)
  (use-package memory-usage)
  (use-package daemons)                   ; system services/daemons

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-utils)
	
#+end_src

* VCS
:PROPERTIES:
:header-args: :tangle ./lisp/init-vcs.el
:END:

Version control systems.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

#+end_src

** magit

#+begin_src emacs-lisp

  (use-package magit
    :bind ((:map magit-status-mode-map
                 ("j" . magit-next-line)
                 ("k" . magit-previous-line)
                 ("J" . magit-section-forward)
                 ("K" . magit-section-backward)
                 ("v" . evil-visual-line))
           (:map magit-log-mode-map
                 ("j" . magit-next-line)
                 ("k" . magit-previous-line))
           (:map magit-revision-mode-map
                 ("j" . magit-next-line)
                 ("k" . magit-previous-line)
                 ("J" . magit-section-forward)
                 ("K" . magit-section-backward))
           (:map magit-diff-mode-map
                 ("j" . magit-next-line)
                 ("k" . magit-previous-line)
                 ("J" . magit-section-forward)
                 ("K" . magit-section-backward))
           (:map transient-base-map
                 ("<escape>" . transient-quit-one)))
    :init
    (leader-key-def "g" 'magit-status)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config
    (leader-key-def
      :keymaps 'magit-status-mode-map
      "u"   'magit-section-up
      "q"   'magit-mode-bury-buffer
      "TAB" 'magit-section-show-level-2-all)
    (leader-key-def
      :keymaps 'magit-log-mode-map
      "q"   'magit-log-bury-buffer)
    (leader-key-def
      "ef" 'with-editor-finish))

#+end_src

** COMMENT git-timemachine

Walk through git revisions of a file

#+begin_src emacs-lisp

  (use-package git-timemachine
    :custom-face
    (git-timemachine-minibuffer-author-face ((t (:inherit success))))
    (git-timemachine-minibuffer-detail-face ((t (:inherit warning))))
    :bind (:map vc-prefix-map
           ("t" . git-timemachine))
    :hook (before-revert . (lambda ()
                             (when (bound-and-true-p git-timemachine-mode)
                               (user-error "Cannot revert the timemachine buffer")))))
	
#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-vcs)
	
#+end_src

* Window
:PROPERTIES:
:header-args: :tangle ./lisp/init-window.el
:END:

Window configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

#+end_src

** zoom

#+begin_src emacs-lisp

  (use-package zoom
    :init
    (custom-set-variables
     '(zoom-size                        '(0.618 . 0.618))
     '(zoom-mode                        t)
     '(zoom-ignored-buffer-names        '("COMMIT_EDITMSG"
                                          " *command-log*"
                                          "*Ilist*"))
     '(zoom-ignored-buffer-name-regexps '("^magit-diff"
                                          "^<tree>.*"
                                          ".*LaTeX environment"
                                          ".*LaTeX fragment")))

    (advice-add 'balance-windows :override (lambda () nil)))

#+end_src

** ace-window

Quickly switch windows

#+begin_src emacs-lisp

  (use-package ace-window
    :hook (emacs-startup . ace-window-display-mode)
    :config
    (defun aw--select-window (number)
      "Slecet the specified window."
      (when (numberp number)
        (let ((found nil))
          (dolist (win (aw-window-list))
            (when (and (window-live-p win)
                       (eq number
                           (string-to-number
                            (window-parameter win 'ace-window-path))))
              (setq found t)
              (aw-switch-to-window win)))
          (unless found
            (message "No specified window: %d" number)))))

    (dotimes (n 9)
      (bind-key (format "M-%d" (1+ n))
                (lambda ()
                  (interactive)
                  (aw--select-window (1+ n))))))

#+end_src

** shackle

Enforce rules for popups

#+begin_src emacs-lisp

  (use-package shackle
    :functions org-switch-to-buffer-other-window
    :commands shackle-display-buffer
    :hook (after-init . shackle-mode)
    :config
    (with-no-warnings
      (defvar shackle--popup-window-list nil) ; all popup windows
      (defvar-local shackle--current-popup-window nil) ; current popup window
      (put 'shackle--current-popup-window 'permanent-local t)

      (defun shackle-last-popup-buffer ()
        "View last popup buffer."
        (interactive)
        (ignore-errors
          (display-buffer shackle-last-buffer)))
      ;; (bind-key "C-h z" #'shackle-last-popup-buffer)

      ;; Add keyword: `autoclose'
      (defun shackle-display-buffer-hack (fn buffer alist plist)
        (let ((window (funcall fn buffer alist plist)))
          (setq shackle--current-popup-window window)

          (when (plist-get plist :autoclose)
            (push (cons window buffer) shackle--popup-window-list))
          window))

      (defun shackle-close-popup-window-hack (&rest _)
        "Close current popup window via `C-g'."
        (setq shackle--popup-window-list
              (cl-loop for (window . buffer) in shackle--popup-window-list
                       if (and (window-live-p window)
                               (equal (window-buffer window) buffer))
                       collect (cons window buffer)))
        ;; `C-g' can deactivate region
        (when (and (called-interactively-p 'interactive)
                   (not (region-active-p)))
          (let (window buffer)
            (if (one-window-p)
                (progn
                  (setq window (selected-window))
                  (when (equal (buffer-local-value 'shackle--current-popup-window
                                                   (window-buffer window))
                               window)
                    (winner-undo)))
              (setq window (caar shackle--popup-window-list))
              (setq buffer (cdar shackle--popup-window-list))
              (when (and (window-live-p window)
                         (equal (window-buffer window) buffer))
                (delete-window window)

                (pop shackle--popup-window-list))))))

      (advice-add #'keyboard-quit :before #'shackle-close-popup-window-hack)
      (advice-add #'shackle-display-buffer :around #'shackle-display-buffer-hack))

    ;; HACK: compatibility issue with `org-switch-to-buffer-other-window'
    (advice-add #'org-switch-to-buffer-other-window :override #'switch-to-buffer-other-window)

    ;; rules
    (setq shackle-default-size 0.4
          shackle-default-alignment 'below
          shackle-default-rule nil
          shackle-rules
          '((("*Help*" "*Apropos*") :select t :size 0.3 :align 'below :autoclose t)
            (compilation-mode :select t :size 0.3 :align 'below :autoclose t)
            (comint-mode :select t :size 0.4 :align 'below :autoclose t)
            ("*Completions*" :size 0.3 :align 'below :autoclose t)
            ("*Pp Eval Output*" :size 15 :align 'below :autoclose t)
            ("*Backtrace*" :select t :size 15 :align 'below)
            (("*Warnings*" "*Messages*") :size 0.3 :align 'below :autoclose t)
            ("^\\*.*Shell Command.*\\*$" :regexp t :size 0.3 :align 'below :autoclose t)
            ("\\*[Wo]*Man.*\\*" :regexp t :select t :align 'below :autoclose t)
            ("*Calendar*" :select t :size 0.3 :align 'below)
            ;; (("*shell*" "*eshell*" "*ielm*") :popup t :size 0.3 :align 'below)
            ("^\\*vc-.*\\*$" :regexp t :size 0.3 :align 'below :autoclose t)
            ("*gud-debug*" :select t :size 0.4 :align 'below :autoclose t)
            ("\\*ivy-occur .*\\*" :regexp t :select t :size 0.3 :align 'below)
            (" *undo-tree*" :select t)
            ("*quickrun*" :select t :size 15 :align 'below)
            ("*tldr*" :size 0.4 :align 'below :autoclose t)
            ("*osx-dictionary*" :size 20 :align 'below :autoclose t)
            ("*Youdao Dictionary*" :size 15 :align 'below :autoclose t)
            ("*Finder*" :select t :size 0.3 :align 'below :autoclose t)
            ("^\\*macro expansion\\**" :regexp t :size 0.4 :align 'below)
            ("^\\*elfeed-entry" :regexp t :size 0.7 :align 'below :autoclose t)
            (" *Install vterm* " :size 0.35 :same t :align 'below)
            (("*Paradox Report*" "*package update results*") :size 0.2 :align 'below :autoclose t)
            ("*Package-Lint*" :size 0.4 :align 'below :autoclose t)
            (("*Gofmt Errors*" "*Go Test*") :select t :size 0.3 :align 'below :autoclose t)
            ("*How Do You*" :select t :size 0.5 :align 'below :autoclose t)

            (("*Org Agenda*" " *Agenda Commands*" " *Org todo*" "*Org Dashboard*" "*Org Select*") :select t :size 0.1 :align 'below :autoclose t)
            (("\\*Capture\\*" "^CAPTURE-.*\\.org*") :regexp t :select t :size 0.3 :align 'below :autoclose t)

            ("*ert*" :size 15 :align 'below :autoclose t)
            (overseer-buffer-mode :size 15 :align 'below :autoclose t)

            (" *Flycheck checkers*" :select t :size 0.3 :align 'below :autoclose t)
            ((flycheck-error-list-mode flymake-diagnostics-buffer-mode)
             :select t :size 0.25 :align 'below :autoclose t)

            (("*lsp-help*" "*lsp session*") :size 0.3 :align 'below :autoclose t)
            ("*DAP Templates*" :select t :size 0.4 :align 'below :autoclose t)
            (dap-server-log-mode :size 15 :align 'below :autoclose t)
            ("*rustfmt*" :select t :size 0.3 :align 'below :autoclose t)
            ((rustic-compilation-mode rustic-cargo-clippy-mode rustic-cargo-outdated-mode rustic-cargo-test-mode) :select t :size 0.3 :align 'below :autoclose t)

            (profiler-report-mode :select t :size 0.5 :align 'below)
            ("*ELP Profiling Restuls*" :select t :size 0.5 :align 'below)

            ((inferior-python-mode inf-ruby-mode swift-repl-mode) :size 0.4 :align 'below)
            ("*prolog*" :size 0.4 :align 'below)

            ((grep-mode rg-mode deadgrep-mode ag-mode pt-mode) :select t :size 0.4 :align 'below)
            (Buffer-menu-mode :select t :size 20 :align 'below :autoclose t)
            (gnus-article-mode :select t :size 0.7 :align 'below :autoclose t)
            (helpful-mode :select t :size 0.3 :align 'below :autoclose t)
            ((process-menu-mode cargo-process-mode) :select t :size 0.3 :align 'below :autoclose t)
            (list-environment-mode :select t :size 0.3 :align 'below :autoclose t)
            (tabulated-list-mode :size 0.4 :align 'below))))

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-window)
	
#+end_src

* Snippets
:PROPERTIES:
:header-args: :tangle ./lisp/init-snippets.el
:END:

Snippets configurations.

** Header

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t -*-

  (require 'warnings)

#+end_src

** yasnippet

#+begin_src emacs-lisp

  (use-package yasnippet
    :diminish yas-minor-mode
    :hook (after-init . yas-global-mode)
    :config
    (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

    (defun my/delete-one-blank-line ()
      (interactive)
      (save-excursion
        (if (re-search-forward "^[[:space:]]*$" nil t)
            (kill-whole-line)))))

#+end_src

** Auto Activating Snippets

#+begin_src emacs-lisp :noweb no-export

  (defun my/change-lang-in-snippet ()
    (shell-command-to-string "xkb-switch -n")
    (remove-hook 'yas/after-exit-snippet-hook 'my/change-lang-in-snippet t))

  (defun my/temp-abort-snippet ()
    (yas-abort-snippet)
    (remove-hook 'post-command-hook #'my/temp-abort-snippet))

  (use-package aas
    :hook (LaTeX-mode . aas-activate-for-major-mode)
    :config
    <<org-mode-snippets>>
    <<latex-mode-snippets>>)

#+end_src

*** org-mode-snippets

#+begin_src emacs-lisp :tangle no :noweb-ref latex-mode-snippets

  (aas-set-snippets 'org-mode
                    :cond (lambda ()
                            (not (texmathp)))
                    "tm"  (lambda ()
                            (interactive)
                            (if (my/current-line-empty-p)
                                (progn
                                  (yas-expand-snippet (yas-lookup-snippet "theorem"))
                                  (my/delete-one-blank-line))
                              (insert "tm")))
                    "еь"  (lambda ()
                            (interactive)
                            (if (my/current-line-empty-p)
                                (progn
                                  (yas-expand-snippet (yas-lookup-snippet "theorem"))
                                  (my/delete-one-blank-line))
                              (insert "еь")))
                    "lm" (lambda ()
                           (interactive)
                           (if (my/current-line-empty-p)
                               (progn
                                 (yas-expand-snippet (yas-lookup-snippet "lemma"))
                                 (my/delete-one-blank-line))
                             (insert "lm")))
                    "дь" (lambda ()
                           (interactive)
                           (if (my/current-line-empty-p)
                               (progn
                                 (yas-expand-snippet (yas-lookup-snippet "lemma"))
                                 (my/delete-one-blank-line))
                             (insert "дь")))
                    "mk"  (lambda ()
                            (interactive)
                            (yas-expand-snippet "\\\\($0\\\\)")
                            (my/org-edit-special)
                            (evil-insert-state)
                            (search-forward "(" nil t nil))
                    "ьл"  (lambda ()
                            (interactive)
                            (yas-expand-snippet "\\\\($0\\\\)")
                            (my/org-edit-special)
                            (evil-insert-state)
                            (search-forward "(" nil t nil))
                    "ms"  (lambda ()
                            (interactive)
                            (yas-expand-snippet "\\\\($1\\\\)$0"))
                    "ьы"  (lambda ()
                            (interactive)
                            (shell-command-to-string "xdotool key Mode_switch")
                            (yas-expand-snippet "\\\\($1\\\\)$0")
                            (add-hook 'yas/after-exit-snippet-hook 'my/change-lang-in-snippet 0 t))
                    "dm"  (lambda ()
                            (interactive)
                            (if (my/current-line-empty-p)
                                (progn
                                  (yas-expand-snippet (yas-lookup-snippet "display math"))
                                  (my/delete-one-blank-line))
                              (insert "dm")))
                    "вь"  (lambda ()
                            (interactive)
                            (if (my/current-line-empty-p)
                                (progn
                                  (yas-expand-snippet (yas-lookup-snippet "display math"))
                                  (my/delete-one-blank-line))
                              (insert "вь")))
                    "'fg" (lambda ()
                            (interactive)
                            (yas-expand-snippet (yas-lookup-snippet "figure")))
                    "эап" (lambda ()
                            (interactive)
                            (shell-command-to-string "xdotool key Mode_switch")
                            (yas-expand-snippet (yas-lookup-snippet "figure")))
                    "'im" (lambda ()
                            (interactive)
                            (my/insert-image))
                    "эшь" (lambda ()
                            (interactive)
                            (my/insert-image)))

  (aas-set-snippets 'org-mode
                    :cond #'texmathp
                    "("     (lambda ()
                              (interactive)
                              (yas-expand-snippet "($1)$0"))
                    "["     (lambda ()
                              (interactive)
                              (yas-expand-snippet "[$1]$0"))
                    "{"     (lambda ()
                              (interactive)
                              (yas-expand-snippet "{$1}$0"))
                    "|"     (lambda ()
                              (interactive)
                              (yas-expand-snippet "|$1|$0"))
                    ";{"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\\\{$1\\\\}$0")))

  (aas-set-snippets 'org-mode
                    :cond #'texmathp
                    "*"     "\\cdot "
                    "%"     "\\%"
                    "  "    "\\ "
                    "xx"    "\\times "
                    "..."   "\\ldots "
                    "->"    "\\to "
                    ">>"    "\\gg "
                    "<<"    "\\ll "
                    "<="    "\\leq "
                    ">="    "\\geq "
                    ";="    "\\neq "
                    "-<"    "\\prec "
                    ">-"    "\\succ "
                    "pm"    "\\pm "
                    "mp"    "\\mp "
                    "~~"    "\\sim "
                    "~="    "\\approx "
                    ";a"    "\\alpha "
                    ";b"    "\\beta "
                    ";g"    "\\gamma "
                    ";G"    "\\Gamma "
                    ";d"    "\\delta "
                    ";D"    "\\Delta "
                    ";e"    "\\vepsilon "
                    ";E"    "\\Vepsilon "
                    ";z"    "\\zeta "
                    ";n"    "\\eta "
                    ";q"    "\\theta "
                    ";Q"    "\\Theta "
                    ";i"    "\\iota "
                    ";k"    "\\kappa "
                    ";l"    "\\lambda "
                    ";L"    "\\Lambda "
                    ";m"    "\\mu "
                    ";v"    "\\nu "
                    ";x"    "\\xi "
                    ";X"    "\\Xi "
                    ";p"    "\\pi "
                    ";P"    "\\Pi "
                    ";r"    "\\rho "
                    ";s"    "\\sigma "
                    ";S"    "\\Sigma "
                    ";t"    "\\tau "
                    ";u"    "\\upsilon "
                    ";U"    "\\Upsilon "
                    ";f"    "\\vphi "
                    ";F"    "\\Phi "
                    ";o"    "\\chi "
                    ";y"    "\\psi "
                    ";Y"    "\\Psi "
                    ";w"    "\\omega "
                    ";W"    "\\Omega "
                    ";h"    "\\hbar "
                    ";8"    "\\infty "
                    "per"   "\\perp "
                    "par"   "\\parallel "
                    "ang"   "\\angle "
                    "dg"    "\\degree "
                    "ua"    "\\ua "
                    "da"    "\\da "
                    "uua"   "\\uua "
                    "uda"   "\\uda "
                    "AA"    "\\forall "
                    "EE"    "\\exists "
                    "nEE"   "\\nexists "
                    "eq"    "\\equiv "
                    "div"   "\\div "
                    "sr"    "^2"
                    "cb"    "^3"
                    "inv"   "^{-1}"
                    "td"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "^{$1}"))
                    "vc"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\vec{$1}$0"))
                    "tri"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\triangle ${1:ABC}$0")
                              (add-hook 'post-command-hook #'my/temp-abort-snippet))
                    "mrm"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\mrm{$1}$0"))
                    "mbf"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\mbf{$1}$0"))
                    "mcal"  (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\mcal{$1}$0"))
                    "mas"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\mscr{$1}$0")))

#+end_src

*** latex-mode-snippets

#+begin_src emacs-lisp :tangle no :noweb-ref latex-mode-snippets

  (aas-set-snippets 'latex-mode
                    :cond (lambda ()
                            (not (texmathp)))
                    "mk"  (lambda ()
                            (interactive)
                            (yas-expand-snippet "$$1$"))
                    "ьл"  (lambda ()
                            (interactive)
                            (shell-command-to-string "xdotool key Mode_switch")
                            (yas-expand-snippet "$$1$")
                            (add-hook 'yas/after-exit-snippet-hook 'my/change-lang-in-snippet 0 t))
                    "ms"  (lambda ()
                            (interactive)
                            (yas-expand-snippet "$$1$"))
                    "ьы"  (lambda ()
                            (interactive)
                            (shell-command-to-string "xdotool key Mode_switch")
                            (yas-expand-snippet "$$1$")
                            (add-hook 'yas/after-exit-snippet-hook 'my/change-lang-in-snippet 0 t))
                    "dm"  (lambda ()
                            (interactive)
                            (yas-expand-snippet (yas-lookup-snippet "align"))
                            (my/delete-one-blank-line))
                    "вь"  (lambda ()
                            (interactive)
                            (shell-command-to-string "xdotool key Mode_switch")
                            (yas-expand-snippet (yas-lookup-snippet "align"))
                            (my/delete-one-blank-line)))

  (aas-set-snippets 'latex-mode
                    :cond #'texmathp
                    "'k"    "кг"
                    "'g"    "г"
                    "'m"    "м"
                    "'c"    "см"
                    "'N"    "Н"
                    "'P"    "Па"
                    "'J"    "Дж"
                    "'h"    "Гц"
                    "'H"    "Гн"
                    "'s"    "с"
                    "'K"    "К"
                    "'r"    "рад"
                    "'l"    "моль"
                    "'A"    "А"
                    "'V"    "В"
                    "'O"    "Ом"
                    "'C"    "Кл"
                    "'W"    "Вт"
                    "'w"    "Вб"
                    "'T"    "Тл"
                    "'F"    "Ф")

  (aas-set-snippets 'latex-mode
                    :cond #'texmathp
                    "("     (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\\\l($1\\\\r)$0"))
                    "["     (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\\\[$1\\\\]$0"))
                    "{"     (lambda ()
                              (interactive)
                              (yas-expand-snippet "{$1}$0"))
                    "|"     (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\\\l|$1\\\\r|$0"))
                    ";{"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\\\{$1\\\\}$0"))
                    ";("    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\l("))
                    ";)"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\r)"))
                    ";["    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\l["))
                    ";]"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\r]"))
                    ";}"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\\\}$0")))

  (aas-set-snippets 'latex-mode
                    :cond #'texmathp
                    "*"     "\\cdot "
                    "%"     "\\%"
                    "  "    "\\ "
                    "xx"    "\\times "
                    "..."   "\\ldots "
                    "->"    "\\to "
                    "=="    "&="
                    "=>"    "\\Ra "
                    "=<"    "\\La "
                    ">>"    "\\gg "
                    "<<"    "\\ll "
                    "<>"    "\\Lra "
                    "<="    "\\leq "
                    ">="    "\\geq "
                    ";="    "\\neq "
                    "-<"    "\\prec "
                    ">-"    "\\succ "
                    "pm"    "\\pm "
                    "mp"    "\\mp "
                    "~~"    "\\sim "
                    "~="    "\\approx "
                    "ml"    "\\models "
                    ";a"    "\\alpha "
                    ";b"    "\\beta "
                    ";g"    "\\gamma "
                    ";G"    "\\Gamma "
                    ";d"    "\\delta "
                    ";D"    "\\Delta "
                    ";e"    "\\vepsilon "
                    ";E"    "\\Vepsilon "
                    ";z"    "\\zeta "
                    ";n"    "\\eta "
                    ";q"    "\\theta "
                    ";Q"    "\\Theta "
                    ";i"    "\\iota "
                    ";k"    "\\kappa "
                    ";l"    "\\lambda "
                    ";L"    "\\Lambda "
                    ";m"    "\\mu "
                    ";v"    "\\nu "
                    ";x"    "\\xi "
                    ";X"    "\\Xi "
                    ";p"    "\\pi "
                    ";P"    "\\Pi "
                    ";r"    "\\rho "
                    ";s"    "\\sigma "
                    ";S"    "\\Sigma "
                    ";t"    "\\tau "
                    ";u"    "\\upsilon "
                    ";U"    "\\Upsilon "
                    ";f"    "\\vphi "
                    ";F"    "\\Phi "
                    ";o"    "\\chi "
                    ";y"    "\\psi "
                    ";Y"    "\\Psi "
                    ";w"    "\\omega "
                    ";W"    "\\Omega "
                    ";h"    "\\hbar "
                    ";8"    "\\infty "
                    ";0"    "\\emptyset "
                    "acos"  "\\arccos "
                    "acot"  "\\arccot "
                    "acsc"  "\\arccsc "
                    "asec"  "\\arcsec "
                    "asin"  "\\arcsin "
                    "atan"  "\\arctan "
                    "atg"   "\\arctg "
                    "cot"   "\\cot "
                    "csc"   "\\csc "
                    "csec"  "\\cosec "
                    "exp"   "\\exp"
                    "ln"    "\\ln "
                    "per"   "\\perp "
                    "par"   "\\parallel "
                    "ang"   "\\angle "
                    "min"   "\\min "
                    "max"   "\\max "
                    "sgn"   "\\sgn "
                    "inn"   "\\in "
                    "cup"   "\\cup "
                    "cap"   "\\cap "
                    "bcup"  "\\bigcup "
                    "bcap"  "\\bigcap "
                    "notin" "\\not\\in "
                    "cc"    "\\subset "
                    "dg"    "\\degree "
                    "vd"    "\\vdots "
                    "vv"    "\\vee "
                    "nvv"   "\\wedge "
                    "qq"    "\\quad "
                    "eq"    "\\equiv "
                    "ua"    "\\ua "
                    "da"    "\\da "
                    "uua"   "\\uua "
                    "uda"   "\\uda "
                    "AA"    "\\forall "
                    "EE"    "\\exists "
                    "nEE"   "\\nexists "
                    "div"   "\\div "
                    "NN"    "\\N"
                    "ZZ"    "\\Z"
                    "QQ"    "\\Q"
                    "RR"    "\\R"
                    "CC"    "\\C"
                    "sr"    "^2"
                    "cb"    "^3"
                    "inv"   "^{-1}")

  (aas-set-snippets 'latex-mode
                    :cond #'texmathp
                    "td"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "^{$1}"))
                    "^"     (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\hat{$1}$0"))
                    "_"     (lambda ()
                              (interactive)
                              (yas-expand-snippet "_{$1}"))
                    ".t"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\dot{$1}$0"))
                    "..t"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\ddot{$1}$0"))
                    "//"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\frac{$1}{$2}$0"))
                    "/dd"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\frac{d $1}{d ${2:t}}$0"))
                    "prt"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\frac{\\partial $1}{\\partial ${2:x}}$0"))
                    "set"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\set{$1}{$2}$0"))
                    "mod"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\Mod{$1}$0"))
                    "bar"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\bar{$1}$0"))
                    "oln"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\oline{$1}$0"))
                    "obr"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\obr{$1}^{$2}$0"))
                    "ubr"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\ubr{$1}_{$2}$0"))
                    ";T"    (lambda ()
                              (interactive)
                              (shell-command-to-string "xkb-switch -n")
                              (yas-expand-snippet "\\text{$1}$0")
                              (add-hook 'yas/after-exit-snippet-hook 'my/change-lang-in-snippet 0 t))
                    "vc"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\vec{$1}$0"))
                    "brv"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\autobrv{$1}$0"))
                    "box"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\boxed{$1}$0"))
                    "sq"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\Sqrt{$1}$0"))
                    "Sq"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\Sqrt[$1]{$2}$0"))
                    "log"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\log_{$1}$0"))
                    "tri"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\triangle ${1:ABC}$0")
                              (add-hook 'post-command-hook #'my/temp-abort-snippet))
                    "cas"   (lambda ()
                              (interactive)
                              (if (not (my/current-line-empty-p))
                                  (evil-open-below 1))
                              (yas-expand-snippet "\\begin{dcases}\n$1\\\\\\\\$2\n\\end{dcases}$0"))
                    "scs"   (lambda ()
                              (interactive)
                              (if (not (my/current-line-empty-p))
                                  (evil-open-below 1))
                              (yas-expand-snippet "\\begin{scases}\n$1\\\\\\\\$2\n\\end{scases}$0"))
                    "rcs"   (lambda ()
                              (interactive)
                              (if (not (my/current-line-empty-p))
                                  (evil-open-below 1))
                              (yas-expand-snippet "\\begin{drcases}\n$1\\\\\\\\$2\n\\end{drcases}$0"))
                    "tag"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\tag{$0}"))
                    "rng"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "${1:1},${2:2},\\ldots,${3:n}$0"))
                    "ilrr"  (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\Bigl(${1:-\\infty},\\ ${2:+\\infty}\\Bigr)$0"))
                    "ilss"  (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\Bigl[$1,\\ $2\\Bigr]$0"))
                    "ilrs"  (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\Bigl(${1:-\\infty},\\ $2\\Bigr]$0"))
                    "ilsr"  (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\Bigl[$1,\\ ${2:+\\infty}\\Bigr)$0"))
                    "binom" (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\binom{${1:n}}{${2:k}}"))
                    "sum"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\sum^{${1:n}}_{${2:i=1}}$0"))
                    "prod"  (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\prod^{$1}_{$2}$0"))
                    "cprod" (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\coprod^{$1}_{$2}$0"))
                    "lim"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\lim_{${1:n} \\to ${2:0}}$0"))
                    "int"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\int^{${1:\\infty}}_{${2:-\\infty}}$0"))
                    "ing"   (lambda ()
                              (interactive)
                              (yas-expand-snippet (yas-lookup-snippet "integ"))
                              (my/delete-one-blank-line))
                    "mat"   (lambda ()
                              (interactive)
                              (yas-expand-snippet (yas-lookup-snippet "matrix"))
                              (my/delete-one-blank-line))
                    "sin"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\sin ${1:\\alpha }")
                              (add-hook 'post-command-hook #'my/temp-abort-snippet))
                    "cos"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\cos ${1:\\alpha }")
                              (add-hook 'post-command-hook #'my/temp-abort-snippet))
                    "tg"    (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\tg ${1:\\alpha }")
                              (add-hook 'post-command-hook #'my/temp-abort-snippet))
                    "ctg"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\ctg ${1:\\alpha }")
                              (add-hook 'post-command-hook #'my/temp-abort-snippet))
                    "mrm"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\mrm{$1}$0"))
                    "mbf"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\mbf{$1}$0"))
                    "mcal"  (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\mcal{$1}$0"))
                    "mas"   (lambda ()
                              (interactive)
                              (yas-expand-snippet "\\mscr{$1}$0")))

#+end_src

** End

#+begin_src emacs-lisp

  (provide 'init-snippets)

#+end_src

